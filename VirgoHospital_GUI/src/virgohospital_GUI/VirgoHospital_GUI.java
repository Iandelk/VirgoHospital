/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package virgohospital_GUI;

import BL.Appointments.AppointmentsBL;
import BL.Doctors.DoctorsBL;
import BL.Other.OthersBL;
import BL.Patients.PatientsBL;
import BL.Statistics.StatisticsBL;
import DAL.Models.Appointment;
import DAL.Models.Contact;
import DAL.Models.ContactNextOfKin;
import DAL.Models.Doctor;
import DAL.Models.NextOfKin;
import DAL.Models.Patient;
import DAL.Models.Specialization;
import DAL.Models.*;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.YearMonth;
import java.time.temporal.IsoFields;
import java.time.temporal.TemporalField;
import java.time.temporal.WeekFields;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SpinnerDateModel;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/**
 *
 * @author Phyrexian
 */
public class VirgoHospital_GUI extends javax.swing.JFrame {

    
  List<Patient> AllPatients;
  List<Specialization> allSpecializations;
  List<Doctor> allDoctors;
  List<Doctor> allGeneralDoctors;
  List<NextOfKin> allNextOfKin;
  List<Contact> allPatientContacts;
  List<ContactNextOfKin> allNextOfKinContacts;
  List<Appointment> previousAppointments;
  List<Appointment> futureAppointments;
  List<PaymentType> paymentType;
static PatientsBL patientsBL;
static OthersBL othersBL;
static DoctorsBL doctorsBL;
static AppointmentsBL appointmentsBL;
static StatisticsBL statisticsBL;
int doctorIDForUpdate;
int patientIDForUpdate;
DefaultTableModel dtm_MedicalStaff = new DefaultTableModel();
DefaultTableModel dtm_Patients = new DefaultTableModel();
DefaultTableModel dtm_previousAppointments = new DefaultTableModel();
DefaultTableModel dtm_futureAppointments = new DefaultTableModel();
    /**
     * Creates new form VirgoHospital_GUI
     */
    public VirgoHospital_GUI() {
       setResizable(false);
         doctorsBL = new DoctorsBL();
          patientsBL = new PatientsBL();
          othersBL = new OthersBL();
          appointmentsBL = new AppointmentsBL();
          statisticsBL = new StatisticsBL();
       allGeneralDoctors = doctorsBL.getAllGeneralDoctors();
       allSpecializations = doctorsBL.getSpecializations();
       paymentType = othersBL.getPaymentType();
        initComponents();
        setUpDoctorTable();
        setUpPatientTable();
        setUpPreviousAppointmentsTable();
        setUpFutureAppointmentsTable();


      
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_mini_group_sex = new javax.swing.ButtonGroup();
        btn_full_group_Sex = new javax.swing.ButtonGroup();
        btn_full_group_Vegetarian = new javax.swing.ButtonGroup();
        btn_full_group_Smoker = new javax.swing.ButtonGroup();
        btn_full_group_ConsumeAlcohol = new javax.swing.ButtonGroup();
        btn_full_group_HaveRegularMeals = new javax.swing.ButtonGroup();
        btn_full_group_EatPredominantly = new javax.swing.ButtonGroup();
        btn_full_group_Diabetic = new javax.swing.ButtonGroup();
        btn_full_group_Hypertensive = new javax.swing.ButtonGroup();
        pnl_Menu = new javax.swing.JPanel();
        btn_menu_QuickForm = new javax.swing.JButton();
        btn_menu_LongForm = new javax.swing.JButton();
        btn_menu_MedicalStaff = new javax.swing.JButton();
        btn_menu_Patients = new javax.swing.JButton();
        btn_menu_Appointments = new javax.swing.JButton();
        btn_menu_Statistics = new javax.swing.JButton();
        pnl_backgroundCardLayout = new javax.swing.JPanel();
        pnl_WelcomeSite = new javax.swing.JPanel();
        lbl_Welcome_Welcometo = new javax.swing.JLabel();
        lbl_Welcome_OutpatientModel = new javax.swing.JLabel();
        pbl_Welcome_Signature = new javax.swing.JLabel();
        pnl_MiniForm = new javax.swing.JPanel();
        lbl_mini_Name = new javax.swing.JLabel();
        lbl_mini_MiddleName = new javax.swing.JLabel();
        lbl_mini_Surname = new javax.swing.JLabel();
        lbl_mini_DateOfBirth = new javax.swing.JLabel();
        lbl_mini_Complaint = new javax.swing.JLabel();
        lbl_mini_Contact = new javax.swing.JLabel();
        lbl_mini_NextOfKinName = new javax.swing.JLabel();
        lbl_mini_NextOfKinMiddleName = new javax.swing.JLabel();
        lbl_mini_NextOfKinSurname = new javax.swing.JLabel();
        lbl_mini_RelationshipToOutpatient = new javax.swing.JLabel();
        lbl_mini_PatientFormTitle = new javax.swing.JLabel();
        lbl_mini_NextOfKinFormTitle = new javax.swing.JLabel();
        txt_mini_Name = new javax.swing.JTextField();
        txt_mini_MiddleName = new javax.swing.JTextField();
        txt_mini_Surname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_mini_Complaint = new javax.swing.JTextArea();
        txt_mini_NextOfKinName = new javax.swing.JTextField();
        txt_mini_NextOfKinMiddleName = new javax.swing.JTextField();
        txt_mini_NextOfKinSurname = new javax.swing.JTextField();
        txt_mini_RelatiounshipToOutpatient = new javax.swing.JTextField();
        lbl_mini_Sex = new javax.swing.JLabel();
        rb_mini_Male = new javax.swing.JRadioButton();
        lbl_mini_Female = new javax.swing.JRadioButton();
        btn_mini_Save = new javax.swing.JButton();
        btn_mini_addContact = new javax.swing.JButton();
        dp_mini_DateOfBirth = new com.toedter.calendar.JDateChooser();
        pnl_mini_Contact = new javax.swing.JPanel();
        txt_mini_Contact = new javax.swing.JTextField();
        btn_mini_reset = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lbl_mini_TitleQuick = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        pnl_tabForm = new javax.swing.JPanel();
        tab_PatientDetails = new javax.swing.JTabbedPane();
        tab_full_PatientDetails = new javax.swing.JPanel();
        pnl_full_BasicDetails_labels = new javax.swing.JPanel();
        lbl_full_OutpatientID = new javax.swing.JLabel();
        lbl_full_Name = new javax.swing.JLabel();
        lbl_full_MiddleName = new javax.swing.JLabel();
        lbl_full_Surname = new javax.swing.JLabel();
        lbl_full_DateOfBirth = new javax.swing.JLabel();
        pnl_full_BasicDetails_textBoxes = new javax.swing.JPanel();
        txt_full_OutpatientID = new javax.swing.JTextField();
        txt_full_Name = new javax.swing.JTextField();
        txt_full_MiddleName = new javax.swing.JTextField();
        txt_full_Surname = new javax.swing.JTextField();
        dp_full_DateOfBirth = new com.toedter.calendar.JDateChooser();
        lbl_full_Sex = new javax.swing.JLabel();
        rb_full_Male = new javax.swing.JRadioButton();
        rb_full_Female = new javax.swing.JRadioButton();
        pnl_full_Contact = new javax.swing.JPanel();
        txt_full_Contact = new javax.swing.JTextField();
        lbl_full_Contact = new javax.swing.JLabel();
        lbl_full_Title_BasicDetails = new javax.swing.JLabel();
        pnl_full_ContactDetails_PresentAdress_labels = new javax.swing.JPanel();
        lbl_full_PresentAddress_Street = new javax.swing.JLabel();
        lbl_full_PresentAddress_DoorNo = new javax.swing.JLabel();
        lbl_full_PresentAddress_Area = new javax.swing.JLabel();
        lbl_full_PresentAddress_City = new javax.swing.JLabel();
        lbl_full_PresentAddress_State = new javax.swing.JLabel();
        lbl_full_PresentAddress_Pincode = new javax.swing.JLabel();
        pnl_full_ContactDetails_PresentAddress_textbox = new javax.swing.JPanel();
        txt_full_PresentAddress_Street = new javax.swing.JTextField();
        txt_full_PresentAddress_DoorNo = new javax.swing.JTextField();
        txt_full_PresentAddress_Area = new javax.swing.JTextField();
        txt_full_PresentAddress_City = new javax.swing.JTextField();
        txt_full_PresentAddress_State = new javax.swing.JTextField();
        txt_full_PresentAddress_Pincode = new javax.swing.JTextField();
        lbl_full_Title_ContactDetails = new javax.swing.JLabel();
        lbl_full_ContactDetails_Present_title = new javax.swing.JLabel();
        lbl_full_ContactDetails_Address_title = new javax.swing.JLabel();
        lbl_full_ContactDetails_Permanent_title = new javax.swing.JLabel();
        lbl_full_ContactDetails_Permanent_Address = new javax.swing.JLabel();
        pnl_full_ContactDetails_PermanentAdress_labels = new javax.swing.JPanel();
        lbl_full_PermanentAddress_Street = new javax.swing.JLabel();
        lbl_full_PermanentAddress_DoorNo = new javax.swing.JLabel();
        lbl_full_PermanentAddress_Area = new javax.swing.JLabel();
        lbl_full_PermanentAddress_City = new javax.swing.JLabel();
        lbl_full_PermanentAddress_State = new javax.swing.JLabel();
        lbl_full_PermanentAddress_Pincode = new javax.swing.JLabel();
        pnl_full_ContactDetails_PermanentAddress_textbox = new javax.swing.JPanel();
        txt_full_PermanentAddress_Street = new javax.swing.JTextField();
        txt_full_PermanentAddress_DoorNo = new javax.swing.JTextField();
        txt_full_PermanentAddress_Area = new javax.swing.JTextField();
        txt_full_PermanentAddress_City = new javax.swing.JTextField();
        txt_full_PermanentAddress_State = new javax.swing.JTextField();
        txt_full_PermanentAddress_Pincode = new javax.swing.JTextField();
        Separat_PatientInfo = new javax.swing.JSeparator();
        Separator_ContactDetails = new javax.swing.JSeparator();
        btn_full_AddContact = new javax.swing.JButton();
        tab_full_NextOfKinDetails = new javax.swing.JPanel();
        pnl_full_NextOfKin_BasicDetails_Labels = new javax.swing.JPanel();
        lbl_full_NextOfKin_Name = new javax.swing.JLabel();
        lbl_full_NextOfKin_MiddleName = new javax.swing.JLabel();
        lbl_full_NextOfKin_Surname = new javax.swing.JLabel();
        lbl_full_NextOfKin_Relationship = new javax.swing.JLabel();
        pnl_full_NextOfKin_BasicDetails_textBoxes = new javax.swing.JPanel();
        txt_full_NextOfKin_Name = new javax.swing.JTextField();
        txt_full_NextOfKin_MiddleName = new javax.swing.JTextField();
        txt_full_NextOfKin_Surname = new javax.swing.JTextField();
        txt_full_NextOfKin_Relationship = new javax.swing.JTextField();
        pnl_full_NextOfKin_Contact = new javax.swing.JPanel();
        txt_full_NextOfKin_Contact = new javax.swing.JTextField();
        lbl_full_NextOfKin_Contact = new javax.swing.JLabel();
        lbl_full_Title_NextOfKin_BasicDetails = new javax.swing.JLabel();
        pnl_full_NextOfKin_ContactDetails_Labels = new javax.swing.JPanel();
        lbl_full_NextOFKin_Street = new javax.swing.JLabel();
        lbl_full_NextOFKin_DoorNo = new javax.swing.JLabel();
        lbl_full_NextOFKin_Area = new javax.swing.JLabel();
        lbl_full_NextOFKin_City = new javax.swing.JLabel();
        lbl_full_NextOFKin_State = new javax.swing.JLabel();
        lbl_full_NextOFKin_Pincode = new javax.swing.JLabel();
        pnl_full_NextOfKin_ContactDetails_textBoxes = new javax.swing.JPanel();
        txt_full_NextOFKin_Street = new javax.swing.JTextField();
        txt_full_NextOFKin_DoorNo = new javax.swing.JTextField();
        txt_full_NextOFKin_Area = new javax.swing.JTextField();
        txt_full_NextOFKin_City = new javax.swing.JTextField();
        txt_full_NextOFKin_State = new javax.swing.JTextField();
        txt_full_NextOFKin_Pincode = new javax.swing.JTextField();
        lbl_full_Title_NextOfKin_ContactDetails = new javax.swing.JLabel();
        Separator_NextOfKin = new javax.swing.JSeparator();
        btn_full_AddNextOfKinContact = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        tab_full_WorkAndLifestyle = new javax.swing.JPanel();
        pnl_full_PersonalDetails_textBoxes = new javax.swing.JPanel();
        txt_full_MaritalStatus = new javax.swing.JTextField();
        txt_full_NoOfDependents = new javax.swing.JTextField();
        txt_full_Height = new javax.swing.JTextField();
        txt_full_Weight = new javax.swing.JTextField();
        lbl_full_BloodType = new javax.swing.JLabel();
        lbl_full_Title_PersonalDetails = new javax.swing.JLabel();
        pnl_full_LifestyleDetails_labels = new javax.swing.JPanel();
        lbl_full_Vegetarian = new javax.swing.JLabel();
        lbl_full_Smoker = new javax.swing.JLabel();
        lbl_full_ConsumeAlcohol = new javax.swing.JLabel();
        lbl_full_Stimulants = new javax.swing.JLabel();
        lbl_full_CoffeTea = new javax.swing.JLabel();
        lbl_full_SoftDrinks = new javax.swing.JLabel();
        lbl_full_RegularMeals = new javax.swing.JLabel();
        lbl_full_EatPredominantly = new javax.swing.JLabel();
        pnl_full_LifestyleDetails_textboxes = new javax.swing.JPanel();
        txt_full_Stimulants = new javax.swing.JTextField();
        txt_full_CoffeTea = new javax.swing.JTextField();
        txt_full_SoftDrinks = new javax.swing.JTextField();
        lbl_full_Title_LifestyleDetails = new javax.swing.JLabel();
        ddl_full_BloodType = new javax.swing.JComboBox<>();
        lbl_full_Title_ProfessionDetails = new javax.swing.JLabel();
        pnl_full_ProffessionDetails_labels = new javax.swing.JPanel();
        lbl_full_Occupation = new javax.swing.JLabel();
        lbl_full_Income = new javax.swing.JLabel();
        pnl_full_PersonalDetails_labels = new javax.swing.JPanel();
        lbl_full_MaritalStatus = new javax.swing.JLabel();
        lbl_full_NoOfDependents = new javax.swing.JLabel();
        lbl_full_Height = new javax.swing.JLabel();
        lbl_full_Weight = new javax.swing.JLabel();
        pnl_full_ProffessionDetails_textBoxes = new javax.swing.JPanel();
        txt_full_Occupation = new javax.swing.JTextField();
        txt_full_Income = new javax.swing.JTextField();
        Personal_Profession_Separator = new javax.swing.JSeparator();
        rb_full_Vegetarian_Yes = new javax.swing.JRadioButton();
        rb_full_Vegetarian_No = new javax.swing.JRadioButton();
        rb_full_Smoker_Yes = new javax.swing.JRadioButton();
        rb_full_Smoker_No = new javax.swing.JRadioButton();
        rb_full_ConsumeAlcohol_Yes = new javax.swing.JRadioButton();
        rb_full_ConsumeAlcohol_No = new javax.swing.JRadioButton();
        rb_full_RegularMeals_Yes = new javax.swing.JRadioButton();
        rb_full_RegularMeals_No = new javax.swing.JRadioButton();
        rb_full_EatPredominantly_Home = new javax.swing.JRadioButton();
        rb_full_EatPredominantly_Outside = new javax.swing.JRadioButton();
        lbl_full_Smoker_PerDay = new javax.swing.JLabel();
        lbl_full_ConsumeAlcohol_PerDay = new javax.swing.JLabel();
        txt_full_Smoker_PerDay = new javax.swing.JTextField();
        txt_full_ConsumeAlcohol_PerDay = new javax.swing.JTextField();
        Separator_WorkAndLifestyle = new javax.swing.JSeparator();
        tab_full_MedicalComplaints = new javax.swing.JPanel();
        pnl_full_BasicComplaints_textBoxes = new javax.swing.JPanel();
        txt_full_HistoryOfTreatments = new javax.swing.JTextField();
        txt_full_Physician_HospitalTreated = new javax.swing.JTextField();
        lbl_full_Title_BasicComplaints = new javax.swing.JLabel();
        pnl_full_ImportantMedicalComplaints_labels = new javax.swing.JPanel();
        lbl_full_Diabetic = new javax.swing.JLabel();
        lbl_full_Hypertensive = new javax.swing.JLabel();
        lbl_full_CardiacCondition = new javax.swing.JLabel();
        lbl_full_RespiratoryCondition = new javax.swing.JLabel();
        lbl_full_DigestiveCondition = new javax.swing.JLabel();
        lbl_full_OrthopedicCondition = new javax.swing.JLabel();
        lbl_full_MuscularCondition = new javax.swing.JLabel();
        lbl_full_NeurologicalCondition = new javax.swing.JLabel();
        lbl_full_KnownAllergies = new javax.swing.JLabel();
        lbl_full_AdverseReactionToDrugs = new javax.swing.JLabel();
        lbl_full_MajorSurgeries = new javax.swing.JLabel();
        pnl_full_ImportantMedicalComplaints_textBoxes = new javax.swing.JPanel();
        txt_full_CardiacCondition = new javax.swing.JTextField();
        txt_full_RespiratoryCondition = new javax.swing.JTextField();
        txt_full_DigestiveCondition = new javax.swing.JTextField();
        txt_full_OrthopedicCondition = new javax.swing.JTextField();
        txt_full_MuscularCondition = new javax.swing.JTextField();
        txt_full_NeurologicalCondition = new javax.swing.JTextField();
        txt_full_KnownAllergies = new javax.swing.JTextField();
        txt_full_AdverseReactionToDrugs = new javax.swing.JTextField();
        txt_full_MajorSurgeries = new javax.swing.JTextField();
        lbl_full_Title_ImportantMedicalComplaints = new javax.swing.JLabel();
        pnl_full_BasicComplaints_labels = new javax.swing.JPanel();
        lbl_full_HistoryOfTreatments = new javax.swing.JLabel();
        lbl_full_Physician_HospitalTreated = new javax.swing.JLabel();
        rb_full_Diabetic_Yes = new javax.swing.JRadioButton();
        rb_full_Diabetic_No = new javax.swing.JRadioButton();
        rb_full_Hypertensive_Yes = new javax.swing.JRadioButton();
        rb_full_Hypertensive_No = new javax.swing.JRadioButton();
        Separator_WorkAndLifestyle1 = new javax.swing.JSeparator();
        lbl_full_StatementOfComlplaint = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_full_StatementOfComlplaint = new javax.swing.JTextArea();
        btn_NextTab = new javax.swing.JButton();
        btn_PreviousTab = new javax.swing.JButton();
        pnl_card_SaveUpdate = new javax.swing.JPanel();
        btn_full_Save = new javax.swing.JButton();
        btn_full_Update = new javax.swing.JButton();
        pnl_full_EditReset = new javax.swing.JPanel();
        bnt_full_Clear = new javax.swing.JButton();
        btn_full_Edit = new javax.swing.JButton();
        pnl_full_Title = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        pnl_ScheduleAppointment = new javax.swing.JPanel();
        txt_ScheduleAnAppointment_Title = new javax.swing.JLabel();
        lbl_ScheduleAppointment_Patient = new javax.swing.JLabel();
        ddl_ScheduleAppointment_Patient_Doctors = new javax.swing.JComboBox(allGeneralDoctors.toArray());
        lbl_ScheduleAppointment_Patient_Complaint_Title = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txt_ScheduleAppointment_Patient_Complaint = new javax.swing.JTextArea();
        lbl_ScheduleAppointment_Patient_DoctorTitle = new javax.swing.JLabel();
        btn_ScheduleAppointment_Patient_ScheduleAnAppointment = new javax.swing.JButton();
        pnl_ScheduleAppointment_TimeDate = new javax.swing.JPanel();
        lbl_ScheduleAppointment_Patient_DateTitle = new javax.swing.JLabel();
        dp_Appointment = new com.toedter.calendar.JDateChooser();
        lbl_ScheduleAppointment_Patient_TimeTitle = new javax.swing.JLabel();
        TimeSpinner_Appointment = new javax.swing.JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(TimeSpinner_Appointment, "HH:mm");
        TimeSpinner_Appointment.setEditor(timeEditor);
        TimeSpinner_Appointment.setValue(new Date());
        pnl_ScheduleAppointment_PatientDetails = new javax.swing.JPanel();
        lbl_ScheduleAppointment_Patient_OpidTitle = new javax.swing.JLabel();
        lbl_ScheduleAppointment_Patient_Opid = new javax.swing.JLabel();
        lbl_ScheduleAppointment_Patient_NameTitle = new javax.swing.JLabel();
        lbl_ScheduleAppointment_Patient_Name_Surname = new javax.swing.JLabel();
        lbl_Schedule_Appointment_Patient_DateOfBirth_Title = new javax.swing.JLabel();
        lbl_Schedule_Appointment_Patient_DateOfBirth = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        pnl_MedicalStaff = new javax.swing.JPanel();
        pnl_MedicalStaff_NorthBorder = new javax.swing.JPanel();
        pnl_MedicalStaff_UpdateSave = new javax.swing.JPanel();
        btn_MedicalStaff_Save = new javax.swing.JButton();
        btn_MedicalStaff_Update = new javax.swing.JButton();
        medicalStaff_AddDoctor_Naslov = new javax.swing.JLabel();
        lbl_MedicalStaff_Name = new javax.swing.JLabel();
        txt_MedicalStaff_Name = new javax.swing.JTextField();
        lbl_MedicalStaff_Surname = new javax.swing.JLabel();
        txt_MedicalStaff_Surname = new javax.swing.JTextField();
        lbl_MedicalStaff_Specialization = new javax.swing.JLabel();
        ddl_MedicalStaff_Specialization = new javax.swing.JComboBox(allSpecializations.toArray());
        btn_MedicalStaff_Reset = new javax.swing.JButton();
        lbl_Doctors_Title = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_MedicalStaff_List = new javax.swing.JTable();
        pnl_MedicalStaff_West = new javax.swing.JPanel();
        pnl_MedicalStaff_South = new javax.swing.JPanel();
        btn_MedicalStaff_Edit = new javax.swing.JButton();
        lbl_MedicalStaff_Filter = new javax.swing.JLabel();
        txt_MedicalStaff_Filter = new javax.swing.JTextField();
        btn_MedicalStaff_Filter = new javax.swing.JButton();
        pnl_Patients = new javax.swing.JPanel();
        pnl_Patients_North = new javax.swing.JPanel();
        lbl_Patients_Title = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        pnl_Patients_West = new javax.swing.JPanel();
        pnl_Patients_South = new javax.swing.JPanel();
        btn_Patients_ShowDetails = new javax.swing.JButton();
        lbl_Patients_Filter = new javax.swing.JLabel();
        txt_Patients_Filter = new javax.swing.JTextField();
        btn_Patients_Filter = new javax.swing.JButton();
        btn_ScheduleAppointment = new javax.swing.JButton();
        scroll_table_patients = new javax.swing.JScrollPane();
        table_Patients_List = new javax.swing.JTable();
        pnl_Appointments = new javax.swing.JPanel();
        pnl_Appointments_North = new javax.swing.JPanel();
        lbl_Appointments_TitleAppointments = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        pnl_Appointments_South = new javax.swing.JPanel();
        lbl_Appointments_Filter = new javax.swing.JLabel();
        txt_Appointments_Filter = new javax.swing.JTextField();
        btn_Appointments_Filter = new javax.swing.JButton();
        pnl_Appointment_Access_Card = new javax.swing.JPanel();
        btn_Appointments_Access_Open = new javax.swing.JButton();
        btn_Appointments_Access_Closed = new javax.swing.JButton();
        pnl_Appointments_West = new javax.swing.JPanel();
        tab_Appointments = new javax.swing.JTabbedPane();
        pnl_AppointmentHistory = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        table_FutureAppointments = new javax.swing.JTable();
        pnl_AppointmentsFuture = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_PreviousAppointments = new javax.swing.JTable();
        pnl_Access_Appointment = new javax.swing.JPanel();
        tab_AccessAppointment = new javax.swing.JTabbedPane();
        pnl_AccessAppointment_Appointment = new javax.swing.JPanel();
        pnl_AccessAppointment_PatientDetails = new javax.swing.JPanel();
        lbl_AccessAppointment_PatientDetails_OpidTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_Opid = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_NameTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_Name_Surname = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_DateOfBirthTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_DateOfBirth = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_PatientDetails_StatementOfComplaint = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txt_AccessAppointment_Diagnosis = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        txt_AccessAppointment_Prescription = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        txt_AccessAppointment_LabTests = new javax.swing.JTextArea();
        lbl_AccessAppointment_LabTestsTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_PrescriptionTitleTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_DiagnosisTitle = new javax.swing.JLabel();
        lbl_AccessAppointment_Title = new javax.swing.JLabel();
        lbl_AccessAppointment_DR = new javax.swing.JLabel();
        lbl_AccessAppointment_DoctorName = new javax.swing.JLabel();
        pnl_AccessAppointment_Referal = new javax.swing.JPanel();
        cb_AccessAppointment_Reference = new javax.swing.JCheckBox();
        ddl_AccessAppointment_Specialization = new javax.swing.JComboBox(allSpecializations.toArray());
        ddl_AccessAppointment_Doctor = new javax.swing.JComboBox(allGeneralDoctors.toArray());
        pnl_AccessAppointment_Followup = new javax.swing.JPanel();
        cb_AccessAppointment_Followup = new javax.swing.JCheckBox();
        dp_AccessAppointment_Followup = new com.toedter.calendar.JDateChooser();
        TimeSpinner_AccessAppointment_Followup = new javax.swing.JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor timeEditorFollow = new JSpinner.DateEditor(TimeSpinner_AccessAppointment_Followup, "HH:mm");
        TimeSpinner_AccessAppointment_Followup.setEditor(timeEditorFollow);
        TimeSpinner_AccessAppointment_Followup.setValue(new Date());
        jSeparator10 = new javax.swing.JSeparator();
        pnl_AccessAppointment_Bill = new javax.swing.JPanel();
        pnl_Bill_West = new javax.swing.JPanel();
        pnl_Bill_North = new javax.swing.JPanel();
        lbl_Bill_Title = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        pnl_Bill_South = new javax.swing.JPanel();
        pnl_Bill_East = new javax.swing.JPanel();
        pnl_Bill_Center = new javax.swing.JPanel();
        pnl_BillGrid = new javax.swing.JPanel();
        lbl_Bill_For = new javax.swing.JLabel();
        lbl_Bill_Patient = new javax.swing.JLabel();
        lbl_Bill_AppointmentCost = new javax.swing.JCheckBox();
        txt_Bill_AppointmentCost = new javax.swing.JTextField();
        lbl_Bill_Perscription_Cost = new javax.swing.JCheckBox();
        txt_Bill_Perscription_Cost = new javax.swing.JTextField();
        lbl_Bill_LabTest_Cost = new javax.swing.JCheckBox();
        txt_Bill_LaboratoryTest_Cost = new javax.swing.JTextField();
        lbl_Bill_PaymentType = new javax.swing.JLabel();
        lbl_Bill_TotalTitle = new javax.swing.JLabel();
        lbl_Bill_Total = new javax.swing.JLabel();
        lbl_Bill_NumberTitle = new javax.swing.JLabel();
        lbl_Bill_Number = new javax.swing.JLabel();
        ddl_Bill_PaymentType = new javax.swing.JComboBox(paymentType.toArray());
        pnl_AccessAppointment_South = new javax.swing.JPanel();
        btn_AccessAppointment_CloseAppointment = new javax.swing.JButton();
        pnl_Statistics = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnl_DailyStatistics = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lbl_StatisticsDaily_patientsSeenTitle = new javax.swing.JLabel();
        lbl_StatisticsDaily_newPatientsTitle = new javax.swing.JLabel();
        lbl_StatisticsDaily_followUpPatientsTitle = new javax.swing.JLabel();
        lbl_StatisticsDaily_patientsSeen = new javax.swing.JLabel();
        lbl_StatisticsDaily_newPatients = new javax.swing.JLabel();
        lbl_StatisticsDaily_followUpPatients = new javax.swing.JLabel();
        lbl_StatisticsDaily_allprescriptionsTitle = new javax.swing.JLabel();
        lbl_StatisticsDaily_totalFeesChargedTitle = new javax.swing.JLabel();
        txt_StatisticsDaily_allLabTests = new javax.swing.JLabel();
        lbl_StatisticsDaily_testsOrdered = new javax.swing.JLabel();
        lbl_StatisticsDaily_totalFeesCharged = new javax.swing.JLabel();
        lbl_StatisticsDaily_medicinesprescribed = new javax.swing.JLabel();
        lbl_Statistics_DailyReportsTitle = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        pnl_WeeklyStatistics = new javax.swing.JPanel();
        pnl_Statistics_chart_newPatients = new javax.swing.JPanel();
        pnl_Statistics_FollowUpPatients = new javax.swing.JPanel();
        pnl_Statistics_chart_newPatientsPerWeek = new javax.swing.JPanel();
        pnl_Statistics_FollowUpPatientsPerWeek = new javax.swing.JPanel();
        monthChooser_Statistics = new com.toedter.calendar.JMonthChooser();
        yearChooser_Statistics = new com.toedter.calendar.JYearChooser();
        btn_Statistics_chooseYearMonth = new javax.swing.JButton();
        weekSpinner_Statistics = new com.toedter.components.JSpinField();
        weekSpinner_Statistics.setEnabled(false);
        btn_Statistics_chooseWeek = new javax.swing.JButton();
        lbl_Statistics_Weekly_monthlyreports = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lbl_statistics_chooseMonth = new javax.swing.JLabel();
        lbl_Statistics_ChooseWeek = new javax.swing.JLabel();
        ddl_Statistics_DoctorsPatients = new javax.swing.JComboBox(allGeneralDoctors.toArray());
        ddl_Statistics_DoctorsPatients.setEnabled(false);
        lbl_Statistics_ForMonth = new javax.swing.JLabel();
        lbl_Statistics_ForWeek = new javax.swing.JLabel();
        lbl_Statistics_averagepatientspermontha = new javax.swing.JLabel();
        lbl_Statistics_averagepatientsperweek = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Virgo Hospital Outpatient Model");
        setSize(new java.awt.Dimension(1000, 800));

        btn_menu_QuickForm.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\quickForm.png")); // NOI18N
        btn_menu_QuickForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_QuickFormActionPerformed(evt);
            }
        });

        btn_menu_LongForm.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\longForm.png")); // NOI18N
        btn_menu_LongForm.setMinimumSize(new java.awt.Dimension(60, 55));
        btn_menu_LongForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_LongFormActionPerformed(evt);
            }
        });

        btn_menu_MedicalStaff.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\AddMedicalStaff.png")); // NOI18N
        btn_menu_MedicalStaff.setMinimumSize(new java.awt.Dimension(60, 55));
        btn_menu_MedicalStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_MedicalStaffActionPerformed(evt);
            }
        });

        btn_menu_Patients.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\PersonIcon.png")); // NOI18N
        btn_menu_Patients.setMinimumSize(new java.awt.Dimension(60, 55));
        btn_menu_Patients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_PatientsActionPerformed(evt);
            }
        });

        btn_menu_Appointments.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\ClockIcon.png")); // NOI18N
        btn_menu_Appointments.setMinimumSize(new java.awt.Dimension(60, 55));
        btn_menu_Appointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_AppointmentsActionPerformed(evt);
            }
        });

        btn_menu_Statistics.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\statisticsIcon.png")); // NOI18N
        btn_menu_Statistics.setMinimumSize(new java.awt.Dimension(60, 55));
        btn_menu_Statistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menu_StatisticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_MenuLayout = new javax.swing.GroupLayout(pnl_Menu);
        pnl_Menu.setLayout(pnl_MenuLayout);
        pnl_MenuLayout.setHorizontalGroup(
            pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MenuLayout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btn_menu_LongForm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_menu_MedicalStaff, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_menu_QuickForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btn_menu_Patients, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_menu_Appointments, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_menu_Statistics, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnl_MenuLayout.setVerticalGroup(
            pnl_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MenuLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(btn_menu_QuickForm, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_menu_LongForm, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_menu_MedicalStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_menu_Patients, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_menu_Appointments, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btn_menu_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(257, Short.MAX_VALUE))
        );

        getContentPane().add(pnl_Menu, java.awt.BorderLayout.LINE_END);

        pnl_backgroundCardLayout.setPreferredSize(new java.awt.Dimension(1350, 814));
        pnl_backgroundCardLayout.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                pnl_backgroundCardLayoutComponentHidden(evt);
            }
        });
        pnl_backgroundCardLayout.setLayout(new java.awt.CardLayout());

        lbl_Welcome_Welcometo.setFont(new java.awt.Font("sansserif", 1, 56)); // NOI18N
        lbl_Welcome_Welcometo.setText("Welcome to Virgo Hospital");

        lbl_Welcome_OutpatientModel.setFont(new java.awt.Font("sansserif", 1, 56)); // NOI18N
        lbl_Welcome_OutpatientModel.setText("Outpatient Model");

        pbl_Welcome_Signature.setBackground(new java.awt.Color(153, 153, 153));
        pbl_Welcome_Signature.setForeground(new java.awt.Color(153, 153, 153));
        pbl_Welcome_Signature.setText("Ivor Anđelković | 2019");

        javax.swing.GroupLayout pnl_WelcomeSiteLayout = new javax.swing.GroupLayout(pnl_WelcomeSite);
        pnl_WelcomeSite.setLayout(pnl_WelcomeSiteLayout);
        pnl_WelcomeSiteLayout.setHorizontalGroup(
            pnl_WelcomeSiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_WelcomeSiteLayout.createSequentialGroup()
                .addGroup(pnl_WelcomeSiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_WelcomeSiteLayout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(lbl_Welcome_Welcometo))
                    .addGroup(pnl_WelcomeSiteLayout.createSequentialGroup()
                        .addGap(414, 414, 414)
                        .addComponent(lbl_Welcome_OutpatientModel))
                    .addGroup(pnl_WelcomeSiteLayout.createSequentialGroup()
                        .addGap(591, 591, 591)
                        .addComponent(pbl_Welcome_Signature)))
                .addContainerGap(333, Short.MAX_VALUE))
        );
        pnl_WelcomeSiteLayout.setVerticalGroup(
            pnl_WelcomeSiteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_WelcomeSiteLayout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(lbl_Welcome_Welcometo)
                .addGap(80, 80, 80)
                .addComponent(lbl_Welcome_OutpatientModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 339, Short.MAX_VALUE)
                .addComponent(pbl_Welcome_Signature)
                .addGap(66, 66, 66))
        );

        pnl_backgroundCardLayout.add(pnl_WelcomeSite, "card10");

        pnl_MiniForm.setMaximumSize(null);
        pnl_MiniForm.setMinimumSize(new java.awt.Dimension(200, 0));
        pnl_MiniForm.setPreferredSize(new java.awt.Dimension(1350, 814));

        lbl_mini_Name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_Name.setText("Name:");

        lbl_mini_MiddleName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_MiddleName.setText("Middle Name:");

        lbl_mini_Surname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_Surname.setText("Surname:");

        lbl_mini_DateOfBirth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_DateOfBirth.setText("Date Of Birth:");

        lbl_mini_Complaint.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_Complaint.setText("Complaint:");

        lbl_mini_Contact.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_Contact.setText("Contact:");

        lbl_mini_NextOfKinName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_NextOfKinName.setText("Next-Of-Kin Name:");

        lbl_mini_NextOfKinMiddleName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_NextOfKinMiddleName.setText("Next-Of-Kin Middle Name:");

        lbl_mini_NextOfKinSurname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_NextOfKinSurname.setText("Next-Of-Kin Surname:");

        lbl_mini_RelationshipToOutpatient.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_RelationshipToOutpatient.setText("Next-Of-Kin Relationship:");

        lbl_mini_PatientFormTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_mini_PatientFormTitle.setText("Patient Information:");

        lbl_mini_NextOfKinFormTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_mini_NextOfKinFormTitle.setText("Next-Of-Kin Information:");

        txt_mini_Name.setMaximumSize(null);
        txt_mini_Name.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_MiddleName.setMaximumSize(null);
        txt_mini_MiddleName.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_Surname.setMaximumSize(null);
        txt_mini_Surname.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_Complaint.setColumns(20);
        txt_mini_Complaint.setRows(5);
        jScrollPane1.setViewportView(txt_mini_Complaint);

        txt_mini_NextOfKinName.setMaximumSize(null);
        txt_mini_NextOfKinName.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_NextOfKinMiddleName.setMaximumSize(null);
        txt_mini_NextOfKinMiddleName.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_NextOfKinSurname.setMaximumSize(null);
        txt_mini_NextOfKinSurname.setMinimumSize(new java.awt.Dimension(200, 0));

        txt_mini_RelatiounshipToOutpatient.setMaximumSize(null);
        txt_mini_RelatiounshipToOutpatient.setMinimumSize(new java.awt.Dimension(200, 0));

        lbl_mini_Sex.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_mini_Sex.setText("Sex:");

        btn_mini_group_sex.add(rb_mini_Male);
        rb_mini_Male.setText("Male");

        btn_mini_group_sex.add(lbl_mini_Female);
        lbl_mini_Female.setText("Female");

        btn_mini_Save.setText("Save");
        btn_mini_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mini_SaveActionPerformed(evt);
            }
        });

        btn_mini_addContact.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\addContact.png")); // NOI18N
        btn_mini_addContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mini_addContactActionPerformed(evt);
            }
        });

        pnl_mini_Contact.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        txt_mini_Contact.setMaximumSize(new java.awt.Dimension(200, 200));
        txt_mini_Contact.setMinimumSize(new java.awt.Dimension(200, 200));
        txt_mini_Contact.setPreferredSize(new java.awt.Dimension(200, 28));
        pnl_mini_Contact.add(txt_mini_Contact);

        btn_mini_reset.setText("Reset");
        btn_mini_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mini_resetActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lbl_mini_TitleQuick.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_mini_TitleQuick.setText("Quick Form");

        javax.swing.GroupLayout pnl_MiniFormLayout = new javax.swing.GroupLayout(pnl_MiniForm);
        pnl_MiniForm.setLayout(pnl_MiniFormLayout);
        pnl_MiniFormLayout.setHorizontalGroup(
            pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_mini_DateOfBirth)
                            .addComponent(lbl_mini_Surname)
                            .addComponent(lbl_mini_Sex)
                            .addComponent(lbl_mini_MiddleName)
                            .addComponent(lbl_mini_Name)
                            .addComponent(lbl_mini_Complaint, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_mini_Contact, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addComponent(rb_mini_Male)
                                .addGap(32, 32, 32)
                                .addComponent(lbl_mini_Female))
                            .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_mini_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_mini_MiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_mini_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dp_mini_DateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                    .addComponent(pnl_mini_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btn_mini_addContact, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mini_NextOfKinSurname)
                            .addComponent(lbl_mini_RelationshipToOutpatient)
                            .addComponent(lbl_mini_NextOfKinMiddleName)
                            .addComponent(lbl_mini_NextOfKinName))
                        .addGap(36, 36, 36)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_mini_NextOfKinName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_mini_NextOfKinSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_mini_RelatiounshipToOutpatient, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_mini_NextOfKinMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGap(538, 538, 538)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_mini_reset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addComponent(lbl_mini_PatientFormTitle)
                                .addGap(536, 536, 536)
                                .addComponent(lbl_mini_NextOfKinFormTitle)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(btn_mini_Save, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addGap(563, 563, 563)
                        .addComponent(lbl_mini_TitleQuick))
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addGap(536, 536, 536)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_MiniFormLayout.setVerticalGroup(
            pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lbl_mini_TitleQuick)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_mini_NextOfKinName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_mini_NextOfKinName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(txt_mini_NextOfKinMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbl_mini_NextOfKinMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_mini_NextOfKinSurname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_mini_NextOfKinSurname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rb_mini_Male)
                            .addComponent(lbl_mini_Female)
                            .addComponent(lbl_mini_Sex))
                        .addGap(16, 16, 16)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dp_mini_DateOfBirth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_mini_DateOfBirth, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_mini_Complaint, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_mini_RelationshipToOutpatient, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_mini_RelatiounshipToOutpatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(pnl_mini_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(lbl_mini_Contact)))
                                .addGap(41, 41, 41))
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(btn_mini_addContact, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn_mini_reset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_mini_Save, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76))))
                    .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_mini_PatientFormTitle)
                            .addComponent(lbl_mini_NextOfKinFormTitle))
                        .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_mini_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_mini_Name))
                                .addGap(35, 35, 35)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_mini_MiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_mini_MiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(pnl_MiniFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_mini_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_mini_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnl_MiniFormLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(83, 83, 83))))
        );

        pnl_backgroundCardLayout.add(pnl_MiniForm, "card_MiniForm");

        pnl_tabForm.setPreferredSize(new java.awt.Dimension(1350, 814));

        tab_PatientDetails.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tab_PatientDetailsStateChanged(evt);
            }
        });

        pnl_full_BasicDetails_labels.setLayout(new java.awt.GridLayout(5, 1, 0, 25));

        lbl_full_OutpatientID.setText("OPID:");
        pnl_full_BasicDetails_labels.add(lbl_full_OutpatientID);

        lbl_full_Name.setText("Name:");
        pnl_full_BasicDetails_labels.add(lbl_full_Name);

        lbl_full_MiddleName.setText("Middle Name:");
        pnl_full_BasicDetails_labels.add(lbl_full_MiddleName);

        lbl_full_Surname.setText("Surname:");
        pnl_full_BasicDetails_labels.add(lbl_full_Surname);

        lbl_full_DateOfBirth.setText("Date Of Birth:");
        pnl_full_BasicDetails_labels.add(lbl_full_DateOfBirth);

        pnl_full_BasicDetails_textBoxes.setLayout(new java.awt.GridLayout(5, 1, 0, 25));
        pnl_full_BasicDetails_textBoxes.add(txt_full_OutpatientID);
        pnl_full_BasicDetails_textBoxes.add(txt_full_Name);
        pnl_full_BasicDetails_textBoxes.add(txt_full_MiddleName);
        pnl_full_BasicDetails_textBoxes.add(txt_full_Surname);
        pnl_full_BasicDetails_textBoxes.add(dp_full_DateOfBirth);

        lbl_full_Sex.setText("Sex:");

        btn_full_group_Sex.add(rb_full_Male);
        rb_full_Male.setText("Male");

        btn_mini_group_sex.add(rb_full_Female);
        rb_full_Female.setText("Female");

        pnl_full_Contact.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        txt_full_Contact.setMaximumSize(new java.awt.Dimension(200, 200));
        txt_full_Contact.setMinimumSize(new java.awt.Dimension(200, 200));
        txt_full_Contact.setPreferredSize(new java.awt.Dimension(200, 28));
        pnl_full_Contact.add(txt_full_Contact);

        lbl_full_Contact.setText("Contact:");

        lbl_full_Title_BasicDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_BasicDetails.setText("Basic Details:");

        pnl_full_ContactDetails_PresentAdress_labels.setLayout(new java.awt.GridLayout(6, 1, 0, 20));

        lbl_full_PresentAddress_Street.setText("Street:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_Street);

        lbl_full_PresentAddress_DoorNo.setText("Door No.:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_DoorNo);

        lbl_full_PresentAddress_Area.setText("Area:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_Area);

        lbl_full_PresentAddress_City.setText("City:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_City);

        lbl_full_PresentAddress_State.setText("State:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_State);

        lbl_full_PresentAddress_Pincode.setText("Pincode:");
        pnl_full_ContactDetails_PresentAdress_labels.add(lbl_full_PresentAddress_Pincode);

        pnl_full_ContactDetails_PresentAddress_textbox.setLayout(new java.awt.GridLayout(6, 1, 0, 20));
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_Street);
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_DoorNo);
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_Area);
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_City);
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_State);
        pnl_full_ContactDetails_PresentAddress_textbox.add(txt_full_PresentAddress_Pincode);

        lbl_full_Title_ContactDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_ContactDetails.setText("Contact Details:");

        lbl_full_ContactDetails_Present_title.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_full_ContactDetails_Present_title.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_full_ContactDetails_Present_title.setText("Present");

        lbl_full_ContactDetails_Address_title.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_full_ContactDetails_Address_title.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_full_ContactDetails_Address_title.setText("Address");

        lbl_full_ContactDetails_Permanent_title.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_full_ContactDetails_Permanent_title.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_full_ContactDetails_Permanent_title.setText("Permanent");

        lbl_full_ContactDetails_Permanent_Address.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_full_ContactDetails_Permanent_Address.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lbl_full_ContactDetails_Permanent_Address.setText("Address");

        pnl_full_ContactDetails_PermanentAdress_labels.setLayout(new java.awt.GridLayout(6, 1, 0, 20));

        lbl_full_PermanentAddress_Street.setText("Street:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_Street);

        lbl_full_PermanentAddress_DoorNo.setText("Door No.:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_DoorNo);

        lbl_full_PermanentAddress_Area.setText("Area:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_Area);

        lbl_full_PermanentAddress_City.setText("City:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_City);

        lbl_full_PermanentAddress_State.setText("State:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_State);

        lbl_full_PermanentAddress_Pincode.setText("Pincode:");
        pnl_full_ContactDetails_PermanentAdress_labels.add(lbl_full_PermanentAddress_Pincode);

        pnl_full_ContactDetails_PermanentAddress_textbox.setLayout(new java.awt.GridLayout(6, 1, 0, 20));
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_Street);
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_DoorNo);
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_Area);
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_City);
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_State);
        pnl_full_ContactDetails_PermanentAddress_textbox.add(txt_full_PermanentAddress_Pincode);

        Separator_ContactDetails.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btn_full_AddContact.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\addContact.png")); // NOI18N
        btn_full_AddContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_full_AddContactActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_full_PatientDetailsLayout = new javax.swing.GroupLayout(tab_full_PatientDetails);
        tab_full_PatientDetails.setLayout(tab_full_PatientDetailsLayout);
        tab_full_PatientDetailsLayout.setHorizontalGroup(
            tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_full_Sex)
                    .addComponent(lbl_full_Contact)
                    .addComponent(pnl_full_BasicDetails_labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_full_BasicDetails_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addComponent(rb_full_Male)
                                .addGap(18, 18, 18)
                                .addComponent(rb_full_Female))))
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(pnl_full_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_full_AddContact, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(130, 130, 130)
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnl_full_ContactDetails_PresentAdress_labels, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(pnl_full_ContactDetails_PermanentAdress_labels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(pnl_full_ContactDetails_PermanentAddress_textbox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(pnl_full_ContactDetails_PresentAddress_textbox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 225, Short.MAX_VALUE))
                    .addComponent(Separat_PatientInfo))
                .addGap(54, 54, 54)
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_full_ContactDetails_Permanent_title)
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lbl_full_ContactDetails_Permanent_Address))
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_full_ContactDetails_Address_title)
                            .addComponent(lbl_full_ContactDetails_Present_title))))
                .addGap(91, 91, 91))
            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(lbl_full_Title_BasicDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_full_Title_ContactDetails)
                .addGap(442, 442, 442))
            .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                    .addGap(469, 469, 469)
                    .addComponent(Separator_ContactDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(867, Short.MAX_VALUE)))
        );
        tab_full_PatientDetailsLayout.setVerticalGroup(
            tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_full_PatientDetailsLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_full_Title_BasicDetails, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_full_Title_ContactDetails, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pnl_full_BasicDetails_labels, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pnl_full_BasicDetails_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rb_full_Female)
                                    .addComponent(rb_full_Male)
                                    .addComponent(lbl_full_Sex)))
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pnl_full_ContactDetails_PresentAddress_textbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(pnl_full_ContactDetails_PresentAdress_labels, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(Separat_PatientInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(lbl_full_ContactDetails_Present_title, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_full_ContactDetails_Address_title)))
                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(lbl_full_Contact))
                            .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pnl_full_ContactDetails_PermanentAddress_textbox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(pnl_full_ContactDetails_PermanentAdress_labels, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(pnl_full_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_full_PatientDetailsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addComponent(lbl_full_ContactDetails_Permanent_title, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_full_ContactDetails_Permanent_Address, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(145, 145, 145))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_full_PatientDetailsLayout.createSequentialGroup()
                                .addComponent(btn_full_AddContact, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(219, 219, 219))))))
            .addGroup(tab_full_PatientDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tab_full_PatientDetailsLayout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addComponent(Separator_ContactDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(74, Short.MAX_VALUE)))
        );

        tab_PatientDetails.addTab("Patient Info", tab_full_PatientDetails);

        pnl_full_NextOfKin_BasicDetails_Labels.setLayout(new java.awt.GridLayout(4, 1, 0, 25));

        lbl_full_NextOfKin_Name.setText("Name:");
        pnl_full_NextOfKin_BasicDetails_Labels.add(lbl_full_NextOfKin_Name);

        lbl_full_NextOfKin_MiddleName.setText("Middle Name:");
        pnl_full_NextOfKin_BasicDetails_Labels.add(lbl_full_NextOfKin_MiddleName);

        lbl_full_NextOfKin_Surname.setText("Surname:");
        pnl_full_NextOfKin_BasicDetails_Labels.add(lbl_full_NextOfKin_Surname);

        lbl_full_NextOfKin_Relationship.setText("Relationship to OP:");
        pnl_full_NextOfKin_BasicDetails_Labels.add(lbl_full_NextOfKin_Relationship);

        pnl_full_NextOfKin_BasicDetails_textBoxes.setLayout(new java.awt.GridLayout(4, 1, 0, 25));
        pnl_full_NextOfKin_BasicDetails_textBoxes.add(txt_full_NextOfKin_Name);
        pnl_full_NextOfKin_BasicDetails_textBoxes.add(txt_full_NextOfKin_MiddleName);
        pnl_full_NextOfKin_BasicDetails_textBoxes.add(txt_full_NextOfKin_Surname);
        pnl_full_NextOfKin_BasicDetails_textBoxes.add(txt_full_NextOfKin_Relationship);

        pnl_full_NextOfKin_Contact.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        txt_full_NextOfKin_Contact.setMaximumSize(new java.awt.Dimension(200, 200));
        txt_full_NextOfKin_Contact.setMinimumSize(new java.awt.Dimension(200, 200));
        txt_full_NextOfKin_Contact.setPreferredSize(new java.awt.Dimension(200, 28));
        pnl_full_NextOfKin_Contact.add(txt_full_NextOfKin_Contact);

        lbl_full_NextOfKin_Contact.setText("Contact:");

        lbl_full_Title_NextOfKin_BasicDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_NextOfKin_BasicDetails.setText("Basic Next Of Kin Details:");

        pnl_full_NextOfKin_ContactDetails_Labels.setLayout(new java.awt.GridLayout(6, 1, 0, 20));

        lbl_full_NextOFKin_Street.setText("Street:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_Street);

        lbl_full_NextOFKin_DoorNo.setText("Door No.:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_DoorNo);

        lbl_full_NextOFKin_Area.setText("Area:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_Area);

        lbl_full_NextOFKin_City.setText("City:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_City);

        lbl_full_NextOFKin_State.setText("State:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_State);

        lbl_full_NextOFKin_Pincode.setText("Pincode:");
        pnl_full_NextOfKin_ContactDetails_Labels.add(lbl_full_NextOFKin_Pincode);

        pnl_full_NextOfKin_ContactDetails_textBoxes.setLayout(new java.awt.GridLayout(6, 1, 0, 20));
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_Street);
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_DoorNo);
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_Area);
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_City);
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_State);
        pnl_full_NextOfKin_ContactDetails_textBoxes.add(txt_full_NextOFKin_Pincode);

        lbl_full_Title_NextOfKin_ContactDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_NextOfKin_ContactDetails.setText("Next Of Kin Contact Details:");

        Separator_NextOfKin.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btn_full_AddNextOfKinContact.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\addContact.png")); // NOI18N
        btn_full_AddNextOfKinContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_full_AddNextOfKinContactActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tab_full_NextOfKinDetailsLayout = new javax.swing.GroupLayout(tab_full_NextOfKinDetails);
        tab_full_NextOfKinDetails.setLayout(tab_full_NextOfKinDetailsLayout);
        tab_full_NextOfKinDetailsLayout.setHorizontalGroup(
            tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_full_NextOfKin_Contact)
                    .addComponent(pnl_full_NextOfKin_BasicDetails_Labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(pnl_full_NextOfKin_BasicDetails_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(pnl_full_NextOfKin_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_full_AddNextOfKinContact, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8)
                .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(pnl_full_NextOfKin_ContactDetails_Labels, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(pnl_full_NextOfKin_ContactDetails_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(465, Short.MAX_VALUE))
            .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(lbl_full_Title_NextOfKin_BasicDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_full_Title_NextOfKin_ContactDetails)
                .addGap(372, 372, 372))
            .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                    .addGap(492, 492, 492)
                    .addComponent(Separator_NextOfKin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(844, Short.MAX_VALUE)))
        );
        tab_full_NextOfKinDetailsLayout.setVerticalGroup(
            tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_full_Title_NextOfKin_BasicDetails)
                    .addComponent(lbl_full_Title_NextOfKin_ContactDetails))
                .addGap(18, 18, 18)
                .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnl_full_NextOfKin_BasicDetails_textBoxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnl_full_NextOfKin_BasicDetails_Labels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(lbl_full_NextOfKin_Contact))
                            .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(pnl_full_NextOfKin_Contact, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btn_full_AddNextOfKinContact, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                        .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnl_full_NextOfKin_ContactDetails_Labels, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnl_full_NextOfKin_ContactDetails_textBoxes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                        .addGap(89, 89, 89)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
            .addGroup(tab_full_NextOfKinDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tab_full_NextOfKinDetailsLayout.createSequentialGroup()
                    .addGap(73, 73, 73)
                    .addComponent(Separator_NextOfKin, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(74, Short.MAX_VALUE)))
        );

        tab_PatientDetails.addTab("Next-Of-Kin Info", tab_full_NextOfKinDetails);

        pnl_full_PersonalDetails_textBoxes.setPreferredSize(new java.awt.Dimension(12, 192));
        pnl_full_PersonalDetails_textBoxes.setLayout(new java.awt.GridLayout(4, 1, 0, 25));
        pnl_full_PersonalDetails_textBoxes.add(txt_full_MaritalStatus);
        pnl_full_PersonalDetails_textBoxes.add(txt_full_NoOfDependents);
        pnl_full_PersonalDetails_textBoxes.add(txt_full_Height);
        pnl_full_PersonalDetails_textBoxes.add(txt_full_Weight);

        lbl_full_BloodType.setText("Blood Type - RH:");

        lbl_full_Title_PersonalDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_PersonalDetails.setText("Personal Details:");

        pnl_full_LifestyleDetails_labels.setLayout(new java.awt.GridLayout(8, 1, 0, 20));

        lbl_full_Vegetarian.setText("Vegetarian:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_Vegetarian);

        lbl_full_Smoker.setText("Smoker:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_Smoker);

        lbl_full_ConsumeAlcohol.setText("Consume Alcohol:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_ConsumeAlcohol);

        lbl_full_Stimulants.setText("Stimulants:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_Stimulants);

        lbl_full_CoffeTea.setText("Coffee-Tea per Day:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_CoffeTea);

        lbl_full_SoftDrinks.setText("Soft Drinks per Day:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_SoftDrinks);

        lbl_full_RegularMeals.setText("Have Regular Meals:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_RegularMeals);

        lbl_full_EatPredominantly.setText("Eat Predominantly:");
        pnl_full_LifestyleDetails_labels.add(lbl_full_EatPredominantly);

        pnl_full_LifestyleDetails_textboxes.setLayout(new java.awt.GridLayout(3, 1, 0, 20));
        pnl_full_LifestyleDetails_textboxes.add(txt_full_Stimulants);
        pnl_full_LifestyleDetails_textboxes.add(txt_full_CoffeTea);
        pnl_full_LifestyleDetails_textboxes.add(txt_full_SoftDrinks);

        lbl_full_Title_LifestyleDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_LifestyleDetails.setText("Lifestyle Details:");

        ddl_full_BloodType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "A+", "A-", "B+", "B-", "AB+", "AB-", "0", " " }));

        lbl_full_Title_ProfessionDetails.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_ProfessionDetails.setText("Profession Details:");

        pnl_full_ProffessionDetails_labels.setLayout(new java.awt.GridLayout(2, 1, 0, 25));

        lbl_full_Occupation.setText("Occupation:");
        pnl_full_ProffessionDetails_labels.add(lbl_full_Occupation);

        lbl_full_Income.setText("Gross Annual Income:");
        pnl_full_ProffessionDetails_labels.add(lbl_full_Income);

        pnl_full_PersonalDetails_labels.setLayout(new java.awt.GridLayout(4, 1, 0, 25));

        lbl_full_MaritalStatus.setText("Marital Status:");
        pnl_full_PersonalDetails_labels.add(lbl_full_MaritalStatus);

        lbl_full_NoOfDependents.setText("No. Of Dependents:");
        pnl_full_PersonalDetails_labels.add(lbl_full_NoOfDependents);

        lbl_full_Height.setText("Height:");
        pnl_full_PersonalDetails_labels.add(lbl_full_Height);

        lbl_full_Weight.setText("Weight:");
        pnl_full_PersonalDetails_labels.add(lbl_full_Weight);

        pnl_full_ProffessionDetails_textBoxes.setLayout(new java.awt.GridLayout(2, 1, 0, 25));
        pnl_full_ProffessionDetails_textBoxes.add(txt_full_Occupation);
        pnl_full_ProffessionDetails_textBoxes.add(txt_full_Income);

        btn_full_group_Vegetarian.add(rb_full_Vegetarian_Yes);
        rb_full_Vegetarian_Yes.setText("Yes");

        btn_full_group_Vegetarian.add(rb_full_Vegetarian_No);
        rb_full_Vegetarian_No.setText("No");

        btn_full_group_Smoker.add(rb_full_Smoker_Yes);
        rb_full_Smoker_Yes.setText("Yes");
        rb_full_Smoker_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_full_Smoker_YesActionPerformed(evt);
            }
        });

        btn_full_group_Smoker.add(rb_full_Smoker_No);
        rb_full_Smoker_No.setText("No");
        rb_full_Smoker_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_full_Smoker_NoActionPerformed(evt);
            }
        });

        btn_full_group_ConsumeAlcohol.add(rb_full_ConsumeAlcohol_Yes);
        rb_full_ConsumeAlcohol_Yes.setText("Yes");
        rb_full_ConsumeAlcohol_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_full_ConsumeAlcohol_YesActionPerformed(evt);
            }
        });

        btn_full_group_ConsumeAlcohol.add(rb_full_ConsumeAlcohol_No);
        rb_full_ConsumeAlcohol_No.setText("No");
        rb_full_ConsumeAlcohol_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_full_ConsumeAlcohol_NoActionPerformed(evt);
            }
        });

        btn_full_group_HaveRegularMeals.add(rb_full_RegularMeals_Yes);
        rb_full_RegularMeals_Yes.setText("Yes");

        btn_full_group_HaveRegularMeals.add(rb_full_RegularMeals_No);
        rb_full_RegularMeals_No.setText("No");

        btn_full_group_EatPredominantly.add(rb_full_EatPredominantly_Home);
        rb_full_EatPredominantly_Home.setText("Home");

        btn_full_group_EatPredominantly.add(rb_full_EatPredominantly_Outside);
        rb_full_EatPredominantly_Outside.setText("Outside");

        lbl_full_Smoker_PerDay.setText("Per Day:");

        lbl_full_ConsumeAlcohol_PerDay.setText("Per Day:");

        txt_full_Smoker_PerDay.setPreferredSize(new java.awt.Dimension(70, 28));

        txt_full_ConsumeAlcohol_PerDay.setPreferredSize(new java.awt.Dimension(70, 28));

        Separator_WorkAndLifestyle.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout tab_full_WorkAndLifestyleLayout = new javax.swing.GroupLayout(tab_full_WorkAndLifestyle);
        tab_full_WorkAndLifestyle.setLayout(tab_full_WorkAndLifestyleLayout);
        tab_full_WorkAndLifestyleLayout.setHorizontalGroup(
            tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_full_BloodType)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(pnl_full_ProffessionDetails_labels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pnl_full_PersonalDetails_labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnl_full_PersonalDetails_textBoxes, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                    .addComponent(ddl_full_BloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pnl_full_ProffessionDetails_textBoxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addComponent(lbl_full_Title_ProfessionDetails))
                            .addComponent(Personal_Profession_Separator)))
                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(lbl_full_Title_PersonalDetails)))
                .addGap(94, 94, 94)
                .addComponent(Separator_WorkAndLifestyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                        .addGap(18, 168, Short.MAX_VALUE)
                        .addComponent(pnl_full_LifestyleDetails_labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_full_LifestyleDetails_textboxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addComponent(rb_full_Vegetarian_Yes)
                                .addGap(18, 18, 18)
                                .addComponent(rb_full_Vegetarian_No))
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb_full_EatPredominantly_Home)
                                    .addComponent(rb_full_RegularMeals_Yes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rb_full_RegularMeals_No)
                                    .addComponent(rb_full_EatPredominantly_Outside)))
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                        .addComponent(rb_full_ConsumeAlcohol_Yes)
                                        .addGap(18, 18, 18)
                                        .addComponent(rb_full_ConsumeAlcohol_No)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbl_full_ConsumeAlcohol_PerDay))
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                        .addComponent(rb_full_Smoker_Yes)
                                        .addGap(18, 18, 18)
                                        .addComponent(rb_full_Smoker_No)
                                        .addGap(38, 38, 38)
                                        .addComponent(lbl_full_Smoker_PerDay)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_full_Smoker_PerDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_full_ConsumeAlcohol_PerDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(303, Short.MAX_VALUE))
                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(lbl_full_Title_LifestyleDetails)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        tab_full_WorkAndLifestyleLayout.setVerticalGroup(
            tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                        .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_full_Title_PersonalDetails, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_full_Title_LifestyleDetails, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnl_full_PersonalDetails_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pnl_full_PersonalDetails_labels, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_full_BloodType)
                                    .addComponent(ddl_full_BloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addComponent(Personal_Profession_Separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(lbl_full_Title_ProfessionDetails)
                                .addGap(18, 18, 18)
                                .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnl_full_ProffessionDetails_labels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnl_full_ProffessionDetails_textBoxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pnl_full_LifestyleDetails_labels, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tab_full_WorkAndLifestyleLayout.createSequentialGroup()
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rb_full_Vegetarian_Yes)
                                        .addComponent(rb_full_Vegetarian_No))
                                    .addGap(30, 30, 30)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rb_full_Smoker_Yes)
                                        .addComponent(rb_full_Smoker_No)
                                        .addComponent(lbl_full_Smoker_PerDay)
                                        .addComponent(txt_full_Smoker_PerDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(19, 19, 19)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rb_full_ConsumeAlcohol_Yes)
                                        .addComponent(rb_full_ConsumeAlcohol_No)
                                        .addComponent(lbl_full_ConsumeAlcohol_PerDay)
                                        .addComponent(txt_full_ConsumeAlcohol_PerDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(21, 21, 21)
                                    .addComponent(pnl_full_LifestyleDetails_textboxes, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rb_full_RegularMeals_Yes)
                                        .addComponent(rb_full_RegularMeals_No))
                                    .addGap(32, 32, 32)
                                    .addGroup(tab_full_WorkAndLifestyleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rb_full_EatPredominantly_Home)
                                        .addComponent(rb_full_EatPredominantly_Outside))))))
                    .addComponent(Separator_WorkAndLifestyle, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        tab_PatientDetails.addTab("Work and Lifestyle Info", tab_full_WorkAndLifestyle);

        pnl_full_BasicComplaints_textBoxes.setLayout(new java.awt.GridLayout(2, 1, 0, 25));
        pnl_full_BasicComplaints_textBoxes.add(txt_full_HistoryOfTreatments);
        pnl_full_BasicComplaints_textBoxes.add(txt_full_Physician_HospitalTreated);

        lbl_full_Title_BasicComplaints.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_BasicComplaints.setText("Basic Complaints:");

        pnl_full_ImportantMedicalComplaints_labels.setLayout(new java.awt.GridLayout(11, 1, 0, 20));

        lbl_full_Diabetic.setText("Diabetic:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_Diabetic);

        lbl_full_Hypertensive.setText("Hypertensive:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_Hypertensive);

        lbl_full_CardiacCondition.setText("Cardiac Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_CardiacCondition);

        lbl_full_RespiratoryCondition.setText("Respiratory Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_RespiratoryCondition);

        lbl_full_DigestiveCondition.setText("Digestive Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_DigestiveCondition);

        lbl_full_OrthopedicCondition.setText("Orthopedic Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_OrthopedicCondition);

        lbl_full_MuscularCondition.setText("Muscular Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_MuscularCondition);

        lbl_full_NeurologicalCondition.setText("Neurological Condition:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_NeurologicalCondition);

        lbl_full_KnownAllergies.setText("Known Allergies:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_KnownAllergies);

        lbl_full_AdverseReactionToDrugs.setText("Adverse Reaction to Drugs:");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_AdverseReactionToDrugs);

        lbl_full_MajorSurgeries.setText("Major Surgeries(History):");
        pnl_full_ImportantMedicalComplaints_labels.add(lbl_full_MajorSurgeries);

        pnl_full_ImportantMedicalComplaints_textBoxes.setLayout(new java.awt.GridLayout(9, 1, 0, 20));
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_CardiacCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_RespiratoryCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_DigestiveCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_OrthopedicCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_MuscularCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_NeurologicalCondition);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_KnownAllergies);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_AdverseReactionToDrugs);
        pnl_full_ImportantMedicalComplaints_textBoxes.add(txt_full_MajorSurgeries);

        lbl_full_Title_ImportantMedicalComplaints.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_full_Title_ImportantMedicalComplaints.setText("Important Medical Complaints:");

        pnl_full_BasicComplaints_labels.setLayout(new java.awt.GridLayout(2, 1, 0, 25));

        lbl_full_HistoryOfTreatments.setText("History of Treatments:");
        pnl_full_BasicComplaints_labels.add(lbl_full_HistoryOfTreatments);

        lbl_full_Physician_HospitalTreated.setText("Physician/Hospital Treated:");
        pnl_full_BasicComplaints_labels.add(lbl_full_Physician_HospitalTreated);

        btn_full_group_Diabetic.add(rb_full_Diabetic_Yes);
        rb_full_Diabetic_Yes.setText("Yes");

        btn_full_group_Diabetic.add(rb_full_Diabetic_No);
        rb_full_Diabetic_No.setText("No");

        btn_full_group_Hypertensive.add(rb_full_Hypertensive_Yes);
        rb_full_Hypertensive_Yes.setText("Yes");

        btn_full_group_Hypertensive.add(rb_full_Hypertensive_No);
        rb_full_Hypertensive_No.setText("No");

        Separator_WorkAndLifestyle1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lbl_full_StatementOfComlplaint.setText("Statement of Complaint:");

        txt_full_StatementOfComlplaint.setColumns(20);
        txt_full_StatementOfComlplaint.setRows(5);
        jScrollPane2.setViewportView(txt_full_StatementOfComlplaint);

        javax.swing.GroupLayout tab_full_MedicalComplaintsLayout = new javax.swing.GroupLayout(tab_full_MedicalComplaints);
        tab_full_MedicalComplaints.setLayout(tab_full_MedicalComplaintsLayout);
        tab_full_MedicalComplaintsLayout.setHorizontalGroup(
            tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_full_BasicComplaints_labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_full_StatementOfComlplaint))
                        .addGap(26, 26, 26)
                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnl_full_BasicComplaints_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(lbl_full_Title_BasicComplaints)))
                .addGap(54, 54, 54)
                .addComponent(Separator_WorkAndLifestyle1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                        .addComponent(pnl_full_ImportantMedicalComplaints_labels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                                .addComponent(rb_full_Hypertensive_Yes)
                                .addGap(18, 18, 18)
                                .addComponent(rb_full_Hypertensive_No))
                            .addComponent(pnl_full_ImportantMedicalComplaints_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                                .addComponent(rb_full_Diabetic_Yes)
                                .addGap(18, 18, 18)
                                .addComponent(rb_full_Diabetic_No))))
                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                        .addComponent(lbl_full_Title_ImportantMedicalComplaints)
                        .addGap(93, 93, 93)))
                .addContainerGap(265, Short.MAX_VALUE))
        );
        tab_full_MedicalComplaintsLayout.setVerticalGroup(
            tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_full_Title_BasicComplaints)
                            .addComponent(lbl_full_Title_ImportantMedicalComplaints, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_full_StatementOfComlplaint)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnl_full_BasicComplaints_labels, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnl_full_BasicComplaints_textBoxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(tab_full_MedicalComplaintsLayout.createSequentialGroup()
                                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(rb_full_Diabetic_Yes)
                                            .addComponent(rb_full_Diabetic_No))
                                        .addGap(29, 29, 29)
                                        .addGroup(tab_full_MedicalComplaintsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(rb_full_Hypertensive_Yes)
                                            .addComponent(rb_full_Hypertensive_No))
                                        .addGap(18, 18, 18)
                                        .addComponent(pnl_full_ImportantMedicalComplaints_textBoxes, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(pnl_full_ImportantMedicalComplaints_labels, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(Separator_WorkAndLifestyle1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        tab_PatientDetails.addTab("Medical Complaints Info", tab_full_MedicalComplaints);

        btn_NextTab.setText("Next Tab >>");
        btn_NextTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_NextTabActionPerformed(evt);
            }
        });

        btn_PreviousTab.setText("<< Previous Tab");
        btn_PreviousTab.setEnabled(false);
        btn_PreviousTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PreviousTabActionPerformed(evt);
            }
        });

        pnl_card_SaveUpdate.setPreferredSize(new java.awt.Dimension(45, 35));
        pnl_card_SaveUpdate.setLayout(new java.awt.CardLayout());

        btn_full_Save.setText("Save");
        btn_full_Save.setAlignmentX(0.5F);
        btn_full_Save.setPreferredSize(new java.awt.Dimension(65, 28));
        btn_full_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_full_SaveActionPerformed(evt);
            }
        });
        pnl_card_SaveUpdate.add(btn_full_Save, "card_btn_Save");

        btn_full_Update.setText("Update");
        btn_full_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_full_UpdateActionPerformed(evt);
            }
        });
        pnl_card_SaveUpdate.add(btn_full_Update, "card_btn_Update");

        pnl_full_EditReset.setPreferredSize(new java.awt.Dimension(80, 35));
        pnl_full_EditReset.setLayout(new java.awt.CardLayout());

        bnt_full_Clear.setText("Reset");
        bnt_full_Clear.setPreferredSize(new java.awt.Dimension(37, 28));
        bnt_full_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_full_ClearActionPerformed(evt);
            }
        });
        pnl_full_EditReset.add(bnt_full_Clear, "card_btn_Clear");

        btn_full_Edit.setText("Edit");
        btn_full_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_full_EditActionPerformed(evt);
            }
        });
        pnl_full_EditReset.add(btn_full_Edit, "card_btn_Edit");

        pnl_full_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        pnl_full_Title.setText("Comprehensive Form");

        javax.swing.GroupLayout pnl_tabFormLayout = new javax.swing.GroupLayout(pnl_tabForm);
        pnl_tabForm.setLayout(pnl_tabFormLayout);
        pnl_tabFormLayout.setHorizontalGroup(
            pnl_tabFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tabFormLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btn_PreviousTab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnl_full_EditReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_card_SaveUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(btn_NextTab)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tabFormLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_tabFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tabFormLayout.createSequentialGroup()
                        .addComponent(pnl_full_Title)
                        .addGap(480, 480, 480))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tabFormLayout.createSequentialGroup()
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(425, 425, 425))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_tabFormLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_PatientDetails)
                .addContainerGap())
        );
        pnl_tabFormLayout.setVerticalGroup(
            pnl_tabFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_tabFormLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(pnl_full_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tab_PatientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnl_tabFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_tabFormLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnl_full_EditReset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_tabFormLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pnl_tabFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_NextTab)
                            .addComponent(btn_PreviousTab)
                            .addComponent(pnl_card_SaveUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_backgroundCardLayout.add(pnl_tabForm, "card_TabForm");

        pnl_ScheduleAppointment.setPreferredSize(new java.awt.Dimension(1350, 814));

        txt_ScheduleAnAppointment_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        txt_ScheduleAnAppointment_Title.setText("Schedule An Appointment");

        lbl_ScheduleAppointment_Patient.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        lbl_ScheduleAppointment_Patient.setText("Patient:");

        ddl_ScheduleAppointment_Patient_Doctors.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N

        lbl_ScheduleAppointment_Patient_Complaint_Title.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_ScheduleAppointment_Patient_Complaint_Title.setText("Statement of Complaint:");

        txt_ScheduleAppointment_Patient_Complaint.setColumns(20);
        txt_ScheduleAppointment_Patient_Complaint.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txt_ScheduleAppointment_Patient_Complaint.setRows(5);
        jScrollPane4.setViewportView(txt_ScheduleAppointment_Patient_Complaint);

        lbl_ScheduleAppointment_Patient_DoctorTitle.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        lbl_ScheduleAppointment_Patient_DoctorTitle.setText("Doctor:");

        btn_ScheduleAppointment_Patient_ScheduleAnAppointment.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        btn_ScheduleAppointment_Patient_ScheduleAnAppointment.setText("Schedule");
        btn_ScheduleAppointment_Patient_ScheduleAnAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ScheduleAppointment_Patient_ScheduleAnAppointmentActionPerformed(evt);
            }
        });

        pnl_ScheduleAppointment_TimeDate.setLayout(new java.awt.GridLayout(4, 1, 0, 10));

        lbl_ScheduleAppointment_Patient_DateTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_ScheduleAppointment_Patient_DateTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_ScheduleAppointment_Patient_DateTitle.setText("Pick Date:");
        pnl_ScheduleAppointment_TimeDate.add(lbl_ScheduleAppointment_Patient_DateTitle);

        Date date = java.sql.Date.valueOf(LocalDate.now());
        dp_Appointment.setDate(date);
        dp_Appointment.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        pnl_ScheduleAppointment_TimeDate.add(dp_Appointment);

        lbl_ScheduleAppointment_Patient_TimeTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_ScheduleAppointment_Patient_TimeTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_ScheduleAppointment_Patient_TimeTitle.setText("Pick Time:");
        pnl_ScheduleAppointment_TimeDate.add(lbl_ScheduleAppointment_Patient_TimeTitle);

        TimeSpinner_Appointment.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        pnl_ScheduleAppointment_TimeDate.add(TimeSpinner_Appointment);

        pnl_ScheduleAppointment_PatientDetails.setLayout(new java.awt.GridLayout(3, 2, 10, 15));

        lbl_ScheduleAppointment_Patient_OpidTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_ScheduleAppointment_Patient_OpidTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_ScheduleAppointment_Patient_OpidTitle.setText("Outpatient ID:");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_ScheduleAppointment_Patient_OpidTitle);

        lbl_ScheduleAppointment_Patient_Opid.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_ScheduleAppointment_Patient_Opid.setText("OPID");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_ScheduleAppointment_Patient_Opid);

        lbl_ScheduleAppointment_Patient_NameTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_ScheduleAppointment_Patient_NameTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_ScheduleAppointment_Patient_NameTitle.setText("Name:");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_ScheduleAppointment_Patient_NameTitle);

        lbl_ScheduleAppointment_Patient_Name_Surname.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_ScheduleAppointment_Patient_Name_Surname.setText("NAME");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_ScheduleAppointment_Patient_Name_Surname);

        lbl_Schedule_Appointment_Patient_DateOfBirth_Title.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_Schedule_Appointment_Patient_DateOfBirth_Title.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_Schedule_Appointment_Patient_DateOfBirth_Title.setText("Date Of Birth:");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_Schedule_Appointment_Patient_DateOfBirth_Title);

        lbl_Schedule_Appointment_Patient_DateOfBirth.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Schedule_Appointment_Patient_DateOfBirth.setText("DateOfBirth");
        pnl_ScheduleAppointment_PatientDetails.add(lbl_Schedule_Appointment_Patient_DateOfBirth);

        javax.swing.GroupLayout pnl_ScheduleAppointmentLayout = new javax.swing.GroupLayout(pnl_ScheduleAppointment);
        pnl_ScheduleAppointment.setLayout(pnl_ScheduleAppointmentLayout);
        pnl_ScheduleAppointmentLayout.setHorizontalGroup(
            pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ScheduleAppointmentLayout.createSequentialGroup()
                .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addGap(486, 486, 486)
                        .addComponent(txt_ScheduleAnAppointment_Title))
                    .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(lbl_ScheduleAppointment_Patient))
                    .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(lbl_ScheduleAppointment_Patient_Complaint_Title)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(pnl_ScheduleAppointment_PatientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(107, 107, 107)
                        .addComponent(pnl_ScheduleAppointment_TimeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addComponent(ddl_ScheduleAppointment_Patient_Doctors, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addComponent(btn_ScheduleAppointment_Patient_ScheduleAnAppointment)
                        .addGap(166, 166, 166))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addComponent(lbl_ScheduleAppointment_Patient_DoctorTitle)
                        .addGap(193, 193, 193))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ScheduleAppointmentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(389, 389, 389))
        );
        pnl_ScheduleAppointmentLayout.setVerticalGroup(
            pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(txt_ScheduleAnAppointment_Title)
                .addGap(10, 10, 10)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ScheduleAppointment_Patient)
                    .addComponent(lbl_ScheduleAppointment_Patient_DoctorTitle))
                .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(pnl_ScheduleAppointment_TimeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(ddl_ScheduleAppointment_Patient_Doctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(122, 122, 122)
                        .addComponent(btn_ScheduleAppointment_Patient_ScheduleAnAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_ScheduleAppointmentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnl_ScheduleAppointment_PatientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addGroup(pnl_ScheduleAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_ScheduleAppointment_Patient_Complaint_Title))))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        pnl_backgroundCardLayout.add(pnl_ScheduleAppointment, "card_ScheduleAppointment");

        pnl_MedicalStaff.setPreferredSize(new java.awt.Dimension(1350, 814));
        pnl_MedicalStaff.setLayout(new java.awt.BorderLayout());

        pnl_MedicalStaff_UpdateSave.setLayout(new java.awt.CardLayout());

        btn_MedicalStaff_Save.setText("Save");
        btn_MedicalStaff_Save.setPreferredSize(new java.awt.Dimension(30, 25));
        btn_MedicalStaff_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MedicalStaff_SaveActionPerformed(evt);
            }
        });
        pnl_MedicalStaff_UpdateSave.add(btn_MedicalStaff_Save, "card_MS_Save");

        btn_MedicalStaff_Update.setText("Update");
        btn_MedicalStaff_Update.setPreferredSize(new java.awt.Dimension(20, 20));
        btn_MedicalStaff_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MedicalStaff_UpdateActionPerformed(evt);
            }
        });
        pnl_MedicalStaff_UpdateSave.add(btn_MedicalStaff_Update, "card_MS_Update");

        medicalStaff_AddDoctor_Naslov.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        medicalStaff_AddDoctor_Naslov.setText("Add Medical Staff:");

        lbl_MedicalStaff_Name.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lbl_MedicalStaff_Name.setText("Name:");

        txt_MedicalStaff_Name.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N

        lbl_MedicalStaff_Surname.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lbl_MedicalStaff_Surname.setText("Surname:");

        txt_MedicalStaff_Surname.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N

        lbl_MedicalStaff_Specialization.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        lbl_MedicalStaff_Specialization.setText("Specialization:");

        ddl_MedicalStaff_Specialization.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N

        btn_MedicalStaff_Reset.setText("Reset");
        btn_MedicalStaff_Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MedicalStaff_ResetActionPerformed(evt);
            }
        });

        lbl_Doctors_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Doctors_Title.setText("Medical Staff");

        javax.swing.GroupLayout pnl_MedicalStaff_NorthBorderLayout = new javax.swing.GroupLayout(pnl_MedicalStaff_NorthBorder);
        pnl_MedicalStaff_NorthBorder.setLayout(pnl_MedicalStaff_NorthBorderLayout);
        pnl_MedicalStaff_NorthBorderLayout.setHorizontalGroup(
            pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                .addGroup(pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(medicalStaff_AddDoctor_Naslov))
                    .addGroup(pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(lbl_MedicalStaff_Name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_MedicalStaff_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(lbl_MedicalStaff_Surname)
                        .addGap(18, 18, 18)
                        .addComponent(txt_MedicalStaff_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_MedicalStaff_Specialization)
                        .addGap(18, 18, 18)
                        .addComponent(ddl_MedicalStaff_Specialization, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnl_MedicalStaff_UpdateSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_MedicalStaff_Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(99, 160, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                        .addComponent(lbl_Doctors_Title)
                        .addGap(532, 532, 532))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(485, 485, 485))))
        );
        pnl_MedicalStaff_NorthBorderLayout.setVerticalGroup(
            pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Doctors_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_MedicalStaff_Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_MedicalStaff_NorthBorderLayout.createSequentialGroup()
                        .addComponent(medicalStaff_AddDoctor_Naslov)
                        .addGap(18, 18, 18)
                        .addGroup(pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnl_MedicalStaff_UpdateSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_MedicalStaff_NorthBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_MedicalStaff_Name)
                                .addComponent(txt_MedicalStaff_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_MedicalStaff_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_MedicalStaff_Surname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_MedicalStaff_Specialization)
                                .addComponent(ddl_MedicalStaff_Specialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(12, 12, 12))
        );

        pnl_MedicalStaff.add(pnl_MedicalStaff_NorthBorder, java.awt.BorderLayout.PAGE_START);

        table_MedicalStaff_List.setAutoCreateRowSorter(true);
        table_MedicalStaff_List.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        table_MedicalStaff_List.setRowHeight(20);
        table_MedicalStaff_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(table_MedicalStaff_List);

        pnl_MedicalStaff.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout pnl_MedicalStaff_WestLayout = new javax.swing.GroupLayout(pnl_MedicalStaff_West);
        pnl_MedicalStaff_West.setLayout(pnl_MedicalStaff_WestLayout);
        pnl_MedicalStaff_WestLayout.setHorizontalGroup(
            pnl_MedicalStaff_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
        );
        pnl_MedicalStaff_WestLayout.setVerticalGroup(
            pnl_MedicalStaff_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 556, Short.MAX_VALUE)
        );

        pnl_MedicalStaff.add(pnl_MedicalStaff_West, java.awt.BorderLayout.LINE_START);

        btn_MedicalStaff_Edit.setText("Edit");
        btn_MedicalStaff_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MedicalStaff_EditActionPerformed(evt);
            }
        });

        lbl_MedicalStaff_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_MedicalStaff_Filter.setText("Filter:");

        txt_MedicalStaff_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txt_MedicalStaff_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_MedicalStaff_FilterActionPerformed(evt);
            }
        });

        btn_MedicalStaff_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btn_MedicalStaff_Filter.setText("Filter");
        btn_MedicalStaff_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_MedicalStaff_FilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_MedicalStaff_SouthLayout = new javax.swing.GroupLayout(pnl_MedicalStaff_South);
        pnl_MedicalStaff_South.setLayout(pnl_MedicalStaff_SouthLayout);
        pnl_MedicalStaff_SouthLayout.setHorizontalGroup(
            pnl_MedicalStaff_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_MedicalStaff_SouthLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(lbl_MedicalStaff_Filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_MedicalStaff_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_MedicalStaff_Filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 660, Short.MAX_VALUE)
                .addComponent(btn_MedicalStaff_Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
        );
        pnl_MedicalStaff_SouthLayout.setVerticalGroup(
            pnl_MedicalStaff_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_MedicalStaff_SouthLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnl_MedicalStaff_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_MedicalStaff_Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_MedicalStaff_Filter)
                    .addComponent(txt_MedicalStaff_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_MedicalStaff_Filter))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pnl_MedicalStaff.add(pnl_MedicalStaff_South, java.awt.BorderLayout.PAGE_END);

        pnl_backgroundCardLayout.add(pnl_MedicalStaff, "card_MedicalStaff");

        pnl_Patients.setPreferredSize(new java.awt.Dimension(1350, 814));
        pnl_Patients.setLayout(new java.awt.BorderLayout());

        lbl_Patients_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Patients_Title.setText("Patients Preview");

        javax.swing.GroupLayout pnl_Patients_NorthLayout = new javax.swing.GroupLayout(pnl_Patients_North);
        pnl_Patients_North.setLayout(pnl_Patients_NorthLayout);
        pnl_Patients_NorthLayout.setHorizontalGroup(
            pnl_Patients_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Patients_NorthLayout.createSequentialGroup()
                .addContainerGap(546, Short.MAX_VALUE)
                .addGroup(pnl_Patients_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Patients_NorthLayout.createSequentialGroup()
                        .addComponent(lbl_Patients_Title)
                        .addGap(475, 475, 475))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Patients_NorthLayout.createSequentialGroup()
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(430, 430, 430))))
        );
        pnl_Patients_NorthLayout.setVerticalGroup(
            pnl_Patients_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Patients_NorthLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lbl_Patients_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pnl_Patients.add(pnl_Patients_North, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout pnl_Patients_WestLayout = new javax.swing.GroupLayout(pnl_Patients_West);
        pnl_Patients_West.setLayout(pnl_Patients_WestLayout);
        pnl_Patients_WestLayout.setHorizontalGroup(
            pnl_Patients_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        pnl_Patients_WestLayout.setVerticalGroup(
            pnl_Patients_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );

        pnl_Patients.add(pnl_Patients_West, java.awt.BorderLayout.LINE_START);

        btn_Patients_ShowDetails.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        btn_Patients_ShowDetails.setText("Show Patient Details");
        btn_Patients_ShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Patients_ShowDetailsActionPerformed(evt);
            }
        });

        lbl_Patients_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_Patients_Filter.setText("Filter:");

        txt_Patients_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txt_Patients_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_Patients_FilterActionPerformed(evt);
            }
        });

        btn_Patients_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btn_Patients_Filter.setText("Filter");
        btn_Patients_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Patients_FilterActionPerformed(evt);
            }
        });

        btn_ScheduleAppointment.setIcon(new javax.swing.ImageIcon("C:\\Users\\Phyrexian\\Documents\\NetBeansProjects\\AppointmentIcon.png")); // NOI18N
        btn_ScheduleAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ScheduleAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_Patients_SouthLayout = new javax.swing.GroupLayout(pnl_Patients_South);
        pnl_Patients_South.setLayout(pnl_Patients_SouthLayout);
        pnl_Patients_SouthLayout.setHorizontalGroup(
            pnl_Patients_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Patients_SouthLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(lbl_Patients_Filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_Patients_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_Patients_Filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 460, Short.MAX_VALUE)
                .addComponent(btn_Patients_ShowDetails)
                .addGap(82, 82, 82)
                .addComponent(btn_ScheduleAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        pnl_Patients_SouthLayout.setVerticalGroup(
            pnl_Patients_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Patients_SouthLayout.createSequentialGroup()
                .addGroup(pnl_Patients_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_Patients_SouthLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(pnl_Patients_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_Patients_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_Patients_Filter)
                                .addComponent(txt_Patients_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_Patients_Filter))
                            .addComponent(btn_Patients_ShowDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_Patients_SouthLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btn_ScheduleAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pnl_Patients.add(pnl_Patients_South, java.awt.BorderLayout.PAGE_END);

        table_Patients_List.setAutoCreateRowSorter(true);
        table_Patients_List.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        table_Patients_List.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_Patients_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scroll_table_patients.setViewportView(table_Patients_List);

        pnl_Patients.add(scroll_table_patients, java.awt.BorderLayout.CENTER);

        pnl_backgroundCardLayout.add(pnl_Patients, "card_Patients");

        pnl_Appointments.setMaximumSize(new java.awt.Dimension(1350, 814));
        pnl_Appointments.setPreferredSize(new java.awt.Dimension(1350, 814));
        pnl_Appointments.setLayout(new java.awt.BorderLayout());

        lbl_Appointments_TitleAppointments.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Appointments_TitleAppointments.setText("Appointments");

        javax.swing.GroupLayout pnl_Appointments_NorthLayout = new javax.swing.GroupLayout(pnl_Appointments_North);
        pnl_Appointments_North.setLayout(pnl_Appointments_NorthLayout);
        pnl_Appointments_NorthLayout.setHorizontalGroup(
            pnl_Appointments_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Appointments_NorthLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_Appointments_TitleAppointments)
                .addGap(547, 547, 547))
            .addGroup(pnl_Appointments_NorthLayout.createSequentialGroup()
                .addGap(527, 527, 527)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(512, Short.MAX_VALUE))
        );
        pnl_Appointments_NorthLayout.setVerticalGroup(
            pnl_Appointments_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Appointments_NorthLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lbl_Appointments_TitleAppointments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pnl_Appointments.add(pnl_Appointments_North, java.awt.BorderLayout.PAGE_START);

        lbl_Appointments_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_Appointments_Filter.setText("Filter:");

        txt_Appointments_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        txt_Appointments_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_Appointments_FilterActionPerformed(evt);
            }
        });

        btn_Appointments_Filter.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btn_Appointments_Filter.setText("Filter");
        btn_Appointments_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Appointments_FilterActionPerformed(evt);
            }
        });

        pnl_Appointment_Access_Card.setLayout(new java.awt.CardLayout());

        btn_Appointments_Access_Open.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn_Appointments_Access_Open.setText("Access");
        btn_Appointments_Access_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Appointments_Access_OpenActionPerformed(evt);
            }
        });
        pnl_Appointment_Access_Card.add(btn_Appointments_Access_Open, "card_btn_open");

        btn_Appointments_Access_Closed.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn_Appointments_Access_Closed.setText("View");
        btn_Appointments_Access_Closed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Appointments_Access_ClosedActionPerformed(evt);
            }
        });
        pnl_Appointment_Access_Card.add(btn_Appointments_Access_Closed, "card_btn_closed");

        javax.swing.GroupLayout pnl_Appointments_SouthLayout = new javax.swing.GroupLayout(pnl_Appointments_South);
        pnl_Appointments_South.setLayout(pnl_Appointments_SouthLayout);
        pnl_Appointments_SouthLayout.setHorizontalGroup(
            pnl_Appointments_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Appointments_SouthLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(lbl_Appointments_Filter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_Appointments_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Appointments_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 706, Short.MAX_VALUE)
                .addComponent(pnl_Appointment_Access_Card, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        pnl_Appointments_SouthLayout.setVerticalGroup(
            pnl_Appointments_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Appointments_SouthLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pnl_Appointments_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_Appointment_Access_Card, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_Appointments_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_Appointments_Filter)
                        .addComponent(txt_Appointments_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_Appointments_Filter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pnl_Appointments.add(pnl_Appointments_South, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout pnl_Appointments_WestLayout = new javax.swing.GroupLayout(pnl_Appointments_West);
        pnl_Appointments_West.setLayout(pnl_Appointments_WestLayout);
        pnl_Appointments_WestLayout.setHorizontalGroup(
            pnl_Appointments_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );
        pnl_Appointments_WestLayout.setVerticalGroup(
            pnl_Appointments_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
        );

        pnl_Appointments.add(pnl_Appointments_West, java.awt.BorderLayout.LINE_START);

        tab_Appointments.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tab_AppointmentsStateChanged(evt);
            }
        });

        pnl_AppointmentHistory.setLayout(new java.awt.BorderLayout());

        table_FutureAppointments.setAutoCreateRowSorter(true);
        table_FutureAppointments.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        table_FutureAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_FutureAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(table_FutureAppointments);

        pnl_AppointmentHistory.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        tab_Appointments.addTab("Open Appointments", pnl_AppointmentHistory);

        pnl_AppointmentsFuture.setLayout(new java.awt.BorderLayout());

        table_PreviousAppointments.setAutoCreateRowSorter(true);
        table_PreviousAppointments.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        table_PreviousAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_PreviousAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(table_PreviousAppointments);

        pnl_AppointmentsFuture.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        tab_Appointments.addTab("Closed Appointments", pnl_AppointmentsFuture);

        pnl_Appointments.add(tab_Appointments, java.awt.BorderLayout.CENTER);

        pnl_backgroundCardLayout.add(pnl_Appointments, "card_Appointments");

        pnl_Access_Appointment.setMaximumSize(new java.awt.Dimension(1350, 814));
        pnl_Access_Appointment.setPreferredSize(new java.awt.Dimension(1350, 814));
        pnl_Access_Appointment.setLayout(new java.awt.BorderLayout());

        pnl_AccessAppointment_PatientDetails.setLayout(new java.awt.GridLayout(4, 2, 10, 10));

        lbl_AccessAppointment_PatientDetails_OpidTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_OpidTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_AccessAppointment_PatientDetails_OpidTitle.setText("Outpatient ID:");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_OpidTitle);

        lbl_AccessAppointment_PatientDetails_Opid.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_Opid.setText("OPID");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_Opid);

        lbl_AccessAppointment_PatientDetails_NameTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_NameTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_AccessAppointment_PatientDetails_NameTitle.setText("Name:");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_NameTitle);

        lbl_AccessAppointment_PatientDetails_Name_Surname.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_Name_Surname.setText("NAME");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_Name_Surname);

        lbl_AccessAppointment_PatientDetails_DateOfBirthTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_DateOfBirthTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_AccessAppointment_PatientDetails_DateOfBirthTitle.setText("Date Of Birth:");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_DateOfBirthTitle);

        lbl_AccessAppointment_PatientDetails_DateOfBirth.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_DateOfBirth.setText("DateOfBirth");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_DateOfBirth);

        lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle.setText("Statement of Complaint:");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle);

        lbl_AccessAppointment_PatientDetails_StatementOfComplaint.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lbl_AccessAppointment_PatientDetails_StatementOfComplaint.setText("Complaint");
        pnl_AccessAppointment_PatientDetails.add(lbl_AccessAppointment_PatientDetails_StatementOfComplaint);

        txt_AccessAppointment_Diagnosis.setColumns(20);
        txt_AccessAppointment_Diagnosis.setRows(5);
        jScrollPane7.setViewportView(txt_AccessAppointment_Diagnosis);

        txt_AccessAppointment_Prescription.setColumns(20);
        txt_AccessAppointment_Prescription.setRows(3);
        jScrollPane8.setViewportView(txt_AccessAppointment_Prescription);

        txt_AccessAppointment_LabTests.setColumns(20);
        txt_AccessAppointment_LabTests.setRows(5);
        jScrollPane9.setViewportView(txt_AccessAppointment_LabTests);

        lbl_AccessAppointment_LabTestsTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_AccessAppointment_LabTestsTitle.setText("Laboratory tests");

        lbl_AccessAppointment_PrescriptionTitleTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_AccessAppointment_PrescriptionTitleTitle.setText("Prescription");

        lbl_AccessAppointment_DiagnosisTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_AccessAppointment_DiagnosisTitle.setText("Diagnosis");

        lbl_AccessAppointment_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_AccessAppointment_Title.setText("Appointment");

        lbl_AccessAppointment_DR.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_AccessAppointment_DR.setText("DR.");

        lbl_AccessAppointment_DoctorName.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_AccessAppointment_DoctorName.setText("Doctor Name and Surname");

        pnl_AccessAppointment_Referal.setLayout(new java.awt.GridLayout(3, 0, 10, 10));

        cb_AccessAppointment_Reference.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        cb_AccessAppointment_Reference.setText("Referal");
        cb_AccessAppointment_Reference.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cb_AccessAppointment_Reference.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_AccessAppointment_ReferenceItemStateChanged(evt);
            }
        });
        pnl_AccessAppointment_Referal.add(cb_AccessAppointment_Reference);

        ddl_AccessAppointment_Specialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddl_AccessAppointment_SpecializationActionPerformed(evt);
            }
        });
        pnl_AccessAppointment_Referal.add(ddl_AccessAppointment_Specialization);

        pnl_AccessAppointment_Referal.add(ddl_AccessAppointment_Doctor);

        pnl_AccessAppointment_Followup.setLayout(new java.awt.GridLayout(3, 0, 10, 10));

        cb_AccessAppointment_Followup.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        cb_AccessAppointment_Followup.setText("Followup");
        cb_AccessAppointment_Followup.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cb_AccessAppointment_Followup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_AccessAppointment_FollowupItemStateChanged(evt);
            }
        });
        pnl_AccessAppointment_Followup.add(cb_AccessAppointment_Followup);

        dp_AccessAppointment_Followup.setDate(date);
        pnl_AccessAppointment_Followup.add(dp_AccessAppointment_Followup);

        TimeSpinner_AccessAppointment_Followup.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        pnl_AccessAppointment_Followup.add(TimeSpinner_AccessAppointment_Followup);

        javax.swing.GroupLayout pnl_AccessAppointment_AppointmentLayout = new javax.swing.GroupLayout(pnl_AccessAppointment_Appointment);
        pnl_AccessAppointment_Appointment.setLayout(pnl_AccessAppointment_AppointmentLayout);
        pnl_AccessAppointment_AppointmentLayout.setHorizontalGroup(
            pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                        .addComponent(pnl_AccessAppointment_PatientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGap(197, 197, 197)
                                .addComponent(lbl_AccessAppointment_Title)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                        .addGap(279, 279, 279)
                                        .addComponent(lbl_AccessAppointment_DiagnosisTitle))
                                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                        .addGap(159, 159, 159)
                                        .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSeparator10)
                                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                                .addComponent(lbl_AccessAppointment_DR)
                                                .addGap(29, 29, 29)
                                                .addComponent(lbl_AccessAppointment_DoctorName)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 283, Short.MAX_VALUE)
                                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnl_AccessAppointment_Followup, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pnl_AccessAppointment_Referal, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53))))
                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                        .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(lbl_AccessAppointment_PrescriptionTitleTitle))
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(lbl_AccessAppointment_LabTestsTitle)))
                        .addGap(91, 91, 91)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pnl_AccessAppointment_AppointmentLayout.setVerticalGroup(
            pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_AccessAppointment_PatientDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                        .addComponent(lbl_AccessAppointment_Title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_AccessAppointment_DR)
                            .addComponent(lbl_AccessAppointment_DoctorName)))
                    .addComponent(pnl_AccessAppointment_Referal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(pnl_AccessAppointment_AppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(lbl_AccessAppointment_PrescriptionTitleTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_AccessAppointment_LabTestsTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnl_AccessAppointment_Followup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_AccessAppointment_AppointmentLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_AccessAppointment_DiagnosisTitle)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))))
        );

        tab_AccessAppointment.addTab("Appointment", pnl_AccessAppointment_Appointment);

        pnl_AccessAppointment_Bill.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnl_Bill_WestLayout = new javax.swing.GroupLayout(pnl_Bill_West);
        pnl_Bill_West.setLayout(pnl_Bill_WestLayout);
        pnl_Bill_WestLayout.setHorizontalGroup(
            pnl_Bill_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        pnl_Bill_WestLayout.setVerticalGroup(
            pnl_Bill_WestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        pnl_AccessAppointment_Bill.add(pnl_Bill_West, java.awt.BorderLayout.LINE_START);

        lbl_Bill_Title.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Bill_Title.setText("Invoice");

        javax.swing.GroupLayout pnl_Bill_NorthLayout = new javax.swing.GroupLayout(pnl_Bill_North);
        pnl_Bill_North.setLayout(pnl_Bill_NorthLayout);
        pnl_Bill_NorthLayout.setHorizontalGroup(
            pnl_Bill_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Bill_NorthLayout.createSequentialGroup()
                .addGap(626, 626, 626)
                .addComponent(lbl_Bill_Title)
                .addContainerGap(604, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_NorthLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_Bill_NorthLayout.setVerticalGroup(
            pnl_Bill_NorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Bill_NorthLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lbl_Bill_Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pnl_AccessAppointment_Bill.add(pnl_Bill_North, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout pnl_Bill_SouthLayout = new javax.swing.GroupLayout(pnl_Bill_South);
        pnl_Bill_South.setLayout(pnl_Bill_SouthLayout);
        pnl_Bill_SouthLayout.setHorizontalGroup(
            pnl_Bill_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1350, Short.MAX_VALUE)
        );
        pnl_Bill_SouthLayout.setVerticalGroup(
            pnl_Bill_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        pnl_AccessAppointment_Bill.add(pnl_Bill_South, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout pnl_Bill_EastLayout = new javax.swing.GroupLayout(pnl_Bill_East);
        pnl_Bill_East.setLayout(pnl_Bill_EastLayout);
        pnl_Bill_EastLayout.setHorizontalGroup(
            pnl_Bill_EastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        pnl_Bill_EastLayout.setVerticalGroup(
            pnl_Bill_EastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        pnl_AccessAppointment_Bill.add(pnl_Bill_East, java.awt.BorderLayout.LINE_END);

        pnl_BillGrid.setMinimumSize(new java.awt.Dimension(50, 50));
        pnl_BillGrid.setLayout(new java.awt.GridLayout(4, 2, 20, 20));

        lbl_Bill_For.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_Bill_For.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Bill_For.setText("Invoice For:");
        pnl_BillGrid.add(lbl_Bill_For);

        lbl_Bill_Patient.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_Bill_Patient.setText("Name Surname");
        pnl_BillGrid.add(lbl_Bill_Patient);

        lbl_Bill_AppointmentCost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        lbl_Bill_AppointmentCost.setSelected(true);
        lbl_Bill_AppointmentCost.setText("Appointment Cost:");
        lbl_Bill_AppointmentCost.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lbl_Bill_AppointmentCostItemStateChanged(evt);
            }
        });
        pnl_BillGrid.add(lbl_Bill_AppointmentCost);

        txt_Bill_AppointmentCost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        pnl_BillGrid.add(txt_Bill_AppointmentCost);

        lbl_Bill_Perscription_Cost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        lbl_Bill_Perscription_Cost.setText("Perscription Cost:");
        lbl_Bill_Perscription_Cost.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lbl_Bill_Perscription_CostItemStateChanged(evt);
            }
        });
        pnl_BillGrid.add(lbl_Bill_Perscription_Cost);

        txt_Bill_Perscription_Cost.setEditable(false);
        txt_Bill_Perscription_Cost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        pnl_BillGrid.add(txt_Bill_Perscription_Cost);

        lbl_Bill_LabTest_Cost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        lbl_Bill_LabTest_Cost.setText("Laboratory Test Cost");
        lbl_Bill_LabTest_Cost.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lbl_Bill_LabTest_CostItemStateChanged(evt);
            }
        });
        pnl_BillGrid.add(lbl_Bill_LabTest_Cost);

        txt_Bill_LaboratoryTest_Cost.setEditable(false);
        txt_Bill_LaboratoryTest_Cost.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        pnl_BillGrid.add(txt_Bill_LaboratoryTest_Cost);

        lbl_Bill_PaymentType.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_Bill_PaymentType.setText("Payment Type:");

        lbl_Bill_TotalTitle.setFont(new java.awt.Font("sansserif", 1, 20)); // NOI18N
        lbl_Bill_TotalTitle.setText("Total:");

        lbl_Bill_Total.setFont(new java.awt.Font("sansserif", 1, 20)); // NOI18N

        lbl_Bill_NumberTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Bill_NumberTitle.setText("Bill No.:");

        lbl_Bill_Number.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        lbl_Bill_Number.setText("Number");

        ddl_Bill_PaymentType.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N

        javax.swing.GroupLayout pnl_Bill_CenterLayout = new javax.swing.GroupLayout(pnl_Bill_Center);
        pnl_Bill_Center.setLayout(pnl_Bill_CenterLayout);
        pnl_Bill_CenterLayout.setHorizontalGroup(
            pnl_Bill_CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_CenterLayout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addComponent(lbl_Bill_NumberTitle)
                .addGap(18, 18, 18)
                .addComponent(lbl_Bill_Number, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_Bill_TotalTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_Bill_Total)
                .addGap(158, 158, 158))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_CenterLayout.createSequentialGroup()
                .addContainerGap(340, Short.MAX_VALUE)
                .addGroup(pnl_Bill_CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_CenterLayout.createSequentialGroup()
                        .addComponent(lbl_Bill_PaymentType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ddl_Bill_PaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_CenterLayout.createSequentialGroup()
                        .addComponent(pnl_BillGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(330, 330, 330))))
        );
        pnl_Bill_CenterLayout.setVerticalGroup(
            pnl_Bill_CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_Bill_CenterLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(pnl_BillGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(pnl_Bill_CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ddl_Bill_PaymentType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_Bill_CenterLayout.createSequentialGroup()
                        .addGroup(pnl_Bill_CenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Bill_TotalTitle)
                            .addComponent(lbl_Bill_Total)
                            .addComponent(lbl_Bill_NumberTitle)
                            .addComponent(lbl_Bill_Number))
                        .addGap(18, 18, 18)
                        .addComponent(lbl_Bill_PaymentType)))
                .addGap(17, 17, 17))
        );

        pnl_AccessAppointment_Bill.add(pnl_Bill_Center, java.awt.BorderLayout.CENTER);

        tab_AccessAppointment.addTab("Invoice", pnl_AccessAppointment_Bill);

        pnl_Access_Appointment.add(tab_AccessAppointment, java.awt.BorderLayout.CENTER);

        btn_AccessAppointment_CloseAppointment.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn_AccessAppointment_CloseAppointment.setText("Finish");
        btn_AccessAppointment_CloseAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AccessAppointment_CloseAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_AccessAppointment_SouthLayout = new javax.swing.GroupLayout(pnl_AccessAppointment_South);
        pnl_AccessAppointment_South.setLayout(pnl_AccessAppointment_SouthLayout);
        pnl_AccessAppointment_SouthLayout.setHorizontalGroup(
            pnl_AccessAppointment_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_AccessAppointment_SouthLayout.createSequentialGroup()
                .addContainerGap(1077, Short.MAX_VALUE)
                .addComponent(btn_AccessAppointment_CloseAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(180, 180, 180))
        );
        pnl_AccessAppointment_SouthLayout.setVerticalGroup(
            pnl_AccessAppointment_SouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_AccessAppointment_SouthLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(btn_AccessAppointment_CloseAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnl_Access_Appointment.add(pnl_AccessAppointment_South, java.awt.BorderLayout.SOUTH);

        pnl_backgroundCardLayout.add(pnl_Access_Appointment, "card_Access_Appointment");

        pnl_Statistics.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(4, 3, 30, 10));

        lbl_StatisticsDaily_patientsSeenTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_patientsSeenTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_patientsSeenTitle.setText("Number of patient appointments:");
        lbl_StatisticsDaily_patientsSeenTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_patientsSeenTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_patientsSeenTitle);

        lbl_StatisticsDaily_newPatientsTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_newPatientsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_newPatientsTitle.setText("Number of new patients:");
        lbl_StatisticsDaily_newPatientsTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_newPatientsTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_newPatientsTitle);

        lbl_StatisticsDaily_followUpPatientsTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_followUpPatientsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_followUpPatientsTitle.setText("Number of follow-up patients:");
        lbl_StatisticsDaily_followUpPatientsTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_followUpPatientsTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_followUpPatientsTitle);

        lbl_StatisticsDaily_patientsSeen.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_patientsSeen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_patientsSeen.setText("patientappointments");
        lbl_StatisticsDaily_patientsSeen.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_patientsSeen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_patientsSeen);

        lbl_StatisticsDaily_newPatients.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_newPatients.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_newPatients.setText("new patients");
        lbl_StatisticsDaily_newPatients.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_newPatients.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_newPatients);

        lbl_StatisticsDaily_followUpPatients.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_followUpPatients.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_followUpPatients.setText("followup");
        lbl_StatisticsDaily_followUpPatients.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_StatisticsDaily_followUpPatients.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_followUpPatients);

        lbl_StatisticsDaily_allprescriptionsTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_allprescriptionsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_allprescriptionsTitle.setText("Tests ordered:");
        lbl_StatisticsDaily_allprescriptionsTitle.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_StatisticsDaily_allprescriptionsTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_allprescriptionsTitle);

        lbl_StatisticsDaily_totalFeesChargedTitle.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_totalFeesChargedTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_totalFeesChargedTitle.setText("Total Fee charged:");
        lbl_StatisticsDaily_totalFeesChargedTitle.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_StatisticsDaily_totalFeesChargedTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_totalFeesChargedTitle);

        txt_StatisticsDaily_allLabTests.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        txt_StatisticsDaily_allLabTests.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_StatisticsDaily_allLabTests.setText("Medicines prescribed:");
        txt_StatisticsDaily_allLabTests.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        txt_StatisticsDaily_allLabTests.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(txt_StatisticsDaily_allLabTests);

        lbl_StatisticsDaily_testsOrdered.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_testsOrdered.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_testsOrdered.setText("tests");
        lbl_StatisticsDaily_testsOrdered.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_StatisticsDaily_testsOrdered.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_testsOrdered);

        lbl_StatisticsDaily_totalFeesCharged.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_totalFeesCharged.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_totalFeesCharged.setText("total");
        lbl_StatisticsDaily_totalFeesCharged.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_StatisticsDaily_totalFeesCharged.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_totalFeesCharged);

        lbl_StatisticsDaily_medicinesprescribed.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        lbl_StatisticsDaily_medicinesprescribed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_StatisticsDaily_medicinesprescribed.setText("Medicines");
        lbl_StatisticsDaily_medicinesprescribed.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbl_StatisticsDaily_medicinesprescribed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel4.add(lbl_StatisticsDaily_medicinesprescribed);

        lbl_Statistics_DailyReportsTitle.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Statistics_DailyReportsTitle.setText("Daily Reports");

        javax.swing.GroupLayout pnl_DailyStatisticsLayout = new javax.swing.GroupLayout(pnl_DailyStatistics);
        pnl_DailyStatistics.setLayout(pnl_DailyStatisticsLayout);
        pnl_DailyStatisticsLayout.setHorizontalGroup(
            pnl_DailyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DailyStatisticsLayout.createSequentialGroup()
                .addGroup(pnl_DailyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_DailyStatisticsLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_DailyStatisticsLayout.createSequentialGroup()
                        .addGap(532, 532, 532)
                        .addComponent(lbl_Statistics_DailyReportsTitle))
                    .addGroup(pnl_DailyStatisticsLayout.createSequentialGroup()
                        .addGap(476, 476, 476)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(483, Short.MAX_VALUE))
        );
        pnl_DailyStatisticsLayout.setVerticalGroup(
            pnl_DailyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DailyStatisticsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lbl_Statistics_DailyReportsTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(263, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Daily Reports", pnl_DailyStatistics);

        pnl_Statistics_chart_newPatients.setLayout(new java.awt.BorderLayout());

        pnl_Statistics_FollowUpPatients.setLayout(new java.awt.BorderLayout());

        pnl_Statistics_chart_newPatientsPerWeek.setLayout(new java.awt.BorderLayout());

        pnl_Statistics_FollowUpPatientsPerWeek.setLayout(new java.awt.BorderLayout());

        btn_Statistics_chooseYearMonth.setText("Show Charts");
        btn_Statistics_chooseYearMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Statistics_chooseYearMonthActionPerformed(evt);
            }
        });

        weekSpinner_Statistics.setValue(1);

        btn_Statistics_chooseWeek.setText("Show Charts");
        btn_Statistics_chooseWeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Statistics_chooseWeekActionPerformed(evt);
            }
        });

        lbl_Statistics_Weekly_monthlyreports.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        lbl_Statistics_Weekly_monthlyreports.setText("Monthly & Weekly Reports");

        lbl_statistics_chooseMonth.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_statistics_chooseMonth.setText("Choose Month:");

        lbl_Statistics_ChooseWeek.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Statistics_ChooseWeek.setText("Choose Week:");

        ddl_Statistics_DoctorsPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddl_Statistics_DoctorsPatientsActionPerformed(evt);
            }
        });

        lbl_Statistics_ForMonth.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Statistics_ForMonth.setText("Average Patients for month:");

        lbl_Statistics_ForWeek.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Statistics_ForWeek.setText("Average Patients for week:");

        lbl_Statistics_averagepatientspermontha.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Statistics_averagepatientspermontha.setText("-");

        lbl_Statistics_averagepatientsperweek.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lbl_Statistics_averagepatientsperweek.setText("-");

        javax.swing.GroupLayout pnl_WeeklyStatisticsLayout = new javax.swing.GroupLayout(pnl_WeeklyStatistics);
        pnl_WeeklyStatistics.setLayout(pnl_WeeklyStatisticsLayout);
        pnl_WeeklyStatisticsLayout.setHorizontalGroup(
            pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                .addGap(263, 263, 263)
                                .addComponent(monthChooser_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbl_statistics_chooseMonth)
                                .addGap(57, 57, 57)))
                        .addComponent(ddl_Statistics_DoctorsPatients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(lbl_Statistics_averagepatientspermontha)
                        .addGap(347, 347, 347)
                        .addComponent(lbl_Statistics_averagepatientsperweek))
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_Statistics_chooseWeek)
                            .addComponent(btn_Statistics_chooseYearMonth))
                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weekSpinner_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(pnl_Statistics_chart_newPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pnl_Statistics_chart_newPatientsPerWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbl_Statistics_ForMonth))
                                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(pnl_Statistics_FollowUpPatientsPerWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(pnl_Statistics_FollowUpPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                                .addGap(156, 156, 156)
                                                .addComponent(lbl_Statistics_ForWeek))))))
                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addComponent(yearChooser_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addGap(476, 476, 476)
                        .addComponent(lbl_Statistics_Weekly_monthlyreports))
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(lbl_Statistics_ChooseWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(469, Short.MAX_VALUE))
        );
        pnl_WeeklyStatisticsLayout.setVerticalGroup(
            pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Statistics_Weekly_monthlyreports)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnl_Statistics_FollowUpPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addComponent(lbl_statistics_chooseMonth)
                        .addGap(18, 18, 18)
                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(monthChooser_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_Statistics_chooseYearMonth))
                                .addGap(18, 18, 18)
                                .addComponent(pnl_Statistics_chart_newPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(yearChooser_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addComponent(lbl_Statistics_ChooseWeek)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addComponent(weekSpinner_Statistics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnl_Statistics_FollowUpPatientsPerWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnl_Statistics_chart_newPatientsPerWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73))
                    .addGroup(pnl_WeeklyStatisticsLayout.createSequentialGroup()
                        .addComponent(btn_Statistics_chooseWeek)
                        .addGap(20, 20, 20)))
                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Statistics_ForMonth)
                    .addComponent(lbl_Statistics_ForWeek))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_WeeklyStatisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Statistics_averagepatientspermontha)
                    .addComponent(ddl_Statistics_DoctorsPatients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Statistics_averagepatientsperweek))
                .addGap(98, 98, 98))
        );

        jTabbedPane1.addTab("Weekly-Monthly Reports", pnl_WeeklyStatistics);

        pnl_Statistics.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pnl_backgroundCardLayout.add(pnl_Statistics, "card_Statistics");

        getContentPane().add(pnl_backgroundCardLayout, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Meni Gumbi za mijenjanje kartica
    
    private void btn_menu_QuickFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_QuickFormActionPerformed
        clearTextFields(pnl_MiniForm);
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_MiniForm");
    }//GEN-LAST:event_btn_menu_QuickFormActionPerformed

    private void btn_menu_LongFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_LongFormActionPerformed
        enableFields(tab_PatientDetails);
        clearTextFields(tab_PatientDetails);
        
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_TabForm");    
         CardLayout cl_btnEdit = (CardLayout) (pnl_full_EditReset.getLayout());
        cl_btnEdit.show(pnl_full_EditReset, "card_btn_Reset");  
        CardLayout cl_btnUpdate = (CardLayout) (pnl_card_SaveUpdate.getLayout());
        cl_btnUpdate.show(pnl_card_SaveUpdate, "card_btn_Save"); 
   
                   if(tab_PatientDetails.getSelectedIndex() == 0){
                       btn_PreviousTab.setEnabled(false);
                   }else if (tab_PatientDetails.getSelectedIndex() == 6){
                       btn_NextTab.setEnabled(false);
                   }else{
                       btn_NextTab.setEnabled(true);
                        btn_PreviousTab.setEnabled(true);
                   }

    }//GEN-LAST:event_btn_menu_LongFormActionPerformed

    private void btn_mini_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mini_SaveActionPerformed
       if(!checkIfFieldEmpty(pnl_MiniForm) && !checkIfFieldEmpty(pnl_mini_Contact) && btn_mini_group_sex.getSelection() != null && dp_mini_DateOfBirth.getDate() != null){

       Integer radioButtonSelection;
       if(rb_mini_Male.isSelected()){
           radioButtonSelection = 1;
       }else{
           radioButtonSelection = 2;
       }
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date = sdf.parse(sdf.format(dp_mini_DateOfBirth.getDate()));
            int patientId = patientsBL.addPatient(txt_mini_Name.getText(), txt_mini_MiddleName.getText(), txt_mini_Surname.getText(),
                     radioButtonSelection, date, txt_mini_Complaint.getText());
            
            AddPatientContactsFromPanel(patientId,pnl_mini_Contact);
           patientsBL.addNextOfKin(patientId, txt_mini_NextOfKinName.getText(), txt_mini_NextOfKinMiddleName.getText(),
                   txt_mini_NextOfKinSurname.getText(), txt_mini_RelatiounshipToOutpatient.getText());
            
           refreshPatientsTable();
         CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Patients");
            clearTextFields(pnl_MiniForm);
        } catch (Exception e) {
           JOptionPane.showMessageDialog(null, e.getMessage(),"Error", JOptionPane.ERROR_MESSAGE );
        }
       }else{
           JOptionPane.showMessageDialog(null, "No field can be empty!","Error", JOptionPane.ERROR_MESSAGE );
       }
    }//GEN-LAST:event_btn_mini_SaveActionPerformed

    private void AddPatientContactsFromPanel(int patientID, JPanel panel) {
        for(Component contact : panel.getComponents()){
            if(contact instanceof JTextField){
                othersBL.addContact(patientID, ((JTextField) contact).getText() );
            }
        }
    }

      private void AddNextOfKinContactsFromPanel(int nextOfKinId, JPanel panel) {
        for(Component contact : panel.getComponents()){
            if(contact instanceof JTextField){
                othersBL.addNextOfKinContact(nextOfKinId, ((JTextField) contact).getText() );
            }
        }
    }

    private void btn_PreviousTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PreviousTabActionPerformed

           CardLayout cl = (CardLayout) (pnl_card_SaveUpdate.getLayout());
        cl.show(pnl_card_SaveUpdate, "card_Update"); 
         tab_PatientDetails.setSelectedIndex(tab_PatientDetails.getSelectedIndex()-1);
        
          if(!btn_NextTab.isEnabled()){
            btn_NextTab.setEnabled(true);
        }
         
        if(tab_PatientDetails.getSelectedIndex() == 0){
            btn_PreviousTab.setEnabled(false);
        }else{
            btn_PreviousTab.setEnabled(true);
        }
        
               // TODO add your handling code here:
    }//GEN-LAST:event_btn_PreviousTabActionPerformed

    private void btn_NextTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_NextTabActionPerformed
           
        tab_PatientDetails.setSelectedIndex(tab_PatientDetails.getSelectedIndex()+1);
        CardLayout cl = (CardLayout) (pnl_card_SaveUpdate.getLayout());
        cl.show(pnl_card_SaveUpdate, "card_Save");     
        if(!btn_PreviousTab.isEnabled()){
            btn_PreviousTab.setEnabled(true);
        }
        
        if(tab_PatientDetails.getSelectedIndex() == 3){
            btn_NextTab.setEnabled(false);
        }else{
            btn_NextTab.setEnabled(true);
        }
    }//GEN-LAST:event_btn_NextTabActionPerformed

    private void tab_PatientDetailsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tab_PatientDetailsStateChanged
          if(tab_PatientDetails.getSelectedIndex() == 0){
                       btn_PreviousTab.setEnabled(false);
                        btn_NextTab.setEnabled(true);
                   }else if (tab_PatientDetails.getSelectedIndex() == 3){
                       btn_NextTab.setEnabled(false);
                       btn_PreviousTab.setEnabled(true);
                   }else{
                       btn_NextTab.setEnabled(true);
                        btn_PreviousTab.setEnabled(true);
                   }
    }//GEN-LAST:event_tab_PatientDetailsStateChanged

    private void btn_full_AddNextOfKinContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_full_AddNextOfKinContactActionPerformed
       addContactTextfield(pnl_full_NextOfKin_Contact);
    }//GEN-LAST:event_btn_full_AddNextOfKinContactActionPerformed

    private void btn_full_AddContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_full_AddContactActionPerformed
       addContactTextfield(pnl_full_Contact);       // TODO add your handling code here:
    }//GEN-LAST:event_btn_full_AddContactActionPerformed

    private void btn_mini_addContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mini_addContactActionPerformed
        addContactTextfield(pnl_mini_Contact);
    }//GEN-LAST:event_btn_mini_addContactActionPerformed

    private void bnt_full_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_full_ClearActionPerformed
        clearTextFields(tab_PatientDetails);
        resetContactPanels(pnl_full_Contact);
        resetContactPanels(pnl_full_NextOfKin_Contact);
    }//GEN-LAST:event_bnt_full_ClearActionPerformed

    private void btn_mini_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mini_resetActionPerformed
          clearTextFields(pnl_MiniForm);
        resetContactPanels(pnl_mini_Contact);

    }//GEN-LAST:event_btn_mini_resetActionPerformed

    private void btn_full_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_full_SaveActionPerformed
    if(!checkIfFieldEmpty(pnl_full_BasicDetails_textBoxes) && !checkIfFieldEmpty(pnl_full_Contact) && btn_full_group_Sex.getSelection() != null && dp_full_DateOfBirth.getDate() != null){
        if(errorIfNotANumber(lbl_full_PresentAddress_DoorNo,txt_full_PresentAddress_DoorNo) != -1 && errorIfNotANumber(lbl_full_PermanentAddress_DoorNo,txt_full_PermanentAddress_DoorNo)!=-1 && errorIfNotANumber(lbl_full_NextOFKin_DoorNo,txt_full_NextOFKin_DoorNo)!=-1 
                && errorIfNotANumber(lbl_full_NoOfDependents, txt_full_NoOfDependents) != -1 && errorIfNotANumber(lbl_full_Height, txt_full_Height) != -1 && errorIfNotANumber(lbl_full_Weight, txt_full_Weight) !=-1
                && errorIfNotANumber(lbl_full_Income, txt_full_Income) != -1 && errorIfNotANumber(lbl_full_Smoker_PerDay, txt_full_Smoker_PerDay) != -1 && errorIfNotANumber(lbl_full_ConsumeAlcohol_PerDay, txt_full_ConsumeAlcohol_PerDay) != -1 
                && errorIfNotANumber(lbl_full_ConsumeAlcohol_PerDay, txt_full_ConsumeAlcohol_PerDay) != -1 && errorIfNotANumber(lbl_full_SoftDrinks, txt_full_SoftDrinks) != -1)
        {
        try {
       int patientId =  patientsBL.addPatientFromFullForm(CreatePatientFromFullForm());
       int nextOfKinId = patientsBL.addNextOfKinFromFullForm(patientId, CreateNextOfKinFromFullForm());
         AddPatientContactsFromPanel(patientId,pnl_full_Contact);
         AddNextOfKinContactsFromPanel(nextOfKinId, pnl_full_NextOfKin_Contact);
         
       JOptionPane.showMessageDialog(null,"Patient successfully added!", "Success!", JOptionPane.INFORMATION_MESSAGE);
       CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Patients");
        clearTextFields(pnl_tabForm);
    refreshPatientsTable();
     } catch (ParseException ex) {
         JOptionPane.showMessageDialog(null,ex.getMessage());
     }
        }
    }else{
        JOptionPane.showMessageDialog(null, "Basic Patient Details fields must not be empty!","Error", JOptionPane.ERROR_MESSAGE );
    }
    }//GEN-LAST:event_btn_full_SaveActionPerformed

    private void btn_full_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_full_UpdateActionPerformed
    if(!checkIfFieldEmpty(pnl_full_BasicDetails_textBoxes) && !checkIfFieldEmpty(pnl_full_Contact) && btn_full_group_Sex.getSelection() != null && dp_full_DateOfBirth.getDate() != null){
      if(errorIfNotANumber(lbl_full_PresentAddress_DoorNo,txt_full_PresentAddress_DoorNo) != -1 && errorIfNotANumber(lbl_full_PermanentAddress_DoorNo,txt_full_PermanentAddress_DoorNo)!=-1 && errorIfNotANumber(lbl_full_NextOFKin_DoorNo,txt_full_NextOFKin_DoorNo)!=-1 
                && errorIfNotANumber(lbl_full_NoOfDependents, txt_full_NoOfDependents) != -1 && errorIfNotANumber(lbl_full_Height, txt_full_Height) != -1 && errorIfNotANumber(lbl_full_Weight, txt_full_Weight) !=-1
                && errorIfNotANumber(lbl_full_Income, txt_full_Income) != -1 && errorIfNotANumber(lbl_full_Smoker_PerDay, txt_full_Smoker_PerDay) != -1 && errorIfNotANumber(lbl_full_ConsumeAlcohol_PerDay, txt_full_ConsumeAlcohol_PerDay) != -1 
                && errorIfNotANumber(lbl_full_ConsumeAlcohol_PerDay, txt_full_ConsumeAlcohol_PerDay) != -1 && errorIfNotANumber(lbl_full_SoftDrinks, txt_full_SoftDrinks) != -1)
        {
     int IdNextOfKin = allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == patientIDForUpdate).findFirst().orElse(null).getIdnextOfKin();
     List<Contact> patientContacts = allPatientContacts.stream().filter(it -> it.getPatient().getIdpatient() == patientIDForUpdate).collect(Collectors.toList() );
     List<ContactNextOfKin> nextOfKinContacts = allNextOfKinContacts.stream().filter(it -> it.getNextOfKin().getIdnextOfKin() == IdNextOfKin).collect(Collectors.toList());
        
      try {
          patientsBL.updatePatient(patientIDForUpdate, CreatePatientFromFullForm());
          patientsBL.updateNextOfKin(IdNextOfKin, CreateNextOfKinFromFullForm());
            UpdateAllContacts(patientContacts, nextOfKinContacts, IdNextOfKin);
      
      } catch (ParseException ex) {
          JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
      }
        
       JOptionPane.showMessageDialog(null, "Patient Updated!", "Success!", JOptionPane.INFORMATION_MESSAGE );
        disableFieldsNoCB(tab_PatientDetails);
        }
    }else{
        JOptionPane.showMessageDialog(null, "Basic Patient Details fields must not be empty!","Error", JOptionPane.ERROR_MESSAGE );
    }
      
    }//GEN-LAST:event_btn_full_UpdateActionPerformed

    private void UpdateAllContacts(List<Contact> patientContacts, List<ContactNextOfKin> nextOfKinContacts, int IdNextOfKin) {
        int i = 0;
         Component tbContact;
        for(Contact patientContact : patientContacts){
            
          tbContact  = pnl_full_Contact.getComponent(i);
            if( tbContact instanceof JTextField )
                othersBL.updatePatientContact(patientContact.getIdcontact(), ((JTextField)tbContact).getText());
            i++;
        }
        if(pnl_full_Contact.getComponentCount() > i){
             for(int moreContacts=i;moreContacts<pnl_full_Contact.getComponentCount();moreContacts++){
         tbContact  = pnl_full_Contact.getComponent(moreContacts);
            if(tbContact instanceof JTextField){
                othersBL.addContact(patientIDForUpdate, ((JTextField) tbContact).getText() );
            }
        }
          
        }
        
        
        
        int j = 0;
        for(ContactNextOfKin nextOfKinContact : nextOfKinContacts){
            
            tbContact = pnl_full_NextOfKin_Contact.getComponent(j);
            if( tbContact instanceof JTextField )
                othersBL.updateNextOfKinContact(nextOfKinContact.getIdcontact(), ((JTextField)tbContact).getText());
            j++;
        }

              if(pnl_full_NextOfKin_Contact.getComponentCount() > j){
             for(int moreContacts=j;moreContacts<pnl_full_NextOfKin_Contact.getComponentCount();moreContacts++){
             tbContact  = pnl_full_NextOfKin_Contact.getComponent(moreContacts);
            if(tbContact instanceof JTextField){
                othersBL.addNextOfKinContact(IdNextOfKin, ((JTextField) tbContact).getText() );
            }
        }
          
        }
            
        
    }
    

    private void btn_menu_MedicalStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_MedicalStaffActionPerformed
 clearTextFields(pnl_MedicalStaff);
 
        CardLayout clSave = (CardLayout) (pnl_MedicalStaff_UpdateSave.getLayout());
        clSave.show(pnl_MedicalStaff_UpdateSave, "card_MS_Save"); 
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_MedicalStaff");       
    }//GEN-LAST:event_btn_menu_MedicalStaffActionPerformed

    private void btn_MedicalStaff_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MedicalStaff_SaveActionPerformed
if(!(txt_MedicalStaff_Name.getText().isEmpty()) && (!txt_MedicalStaff_Surname.getText().isEmpty()) ){
    doctorsBL.addDoctor(CreateDoctor());
    clearTextFields(pnl_MedicalStaff_NorthBorder);
     refreshDoctorsTable();
}      else{
    JOptionPane.showMessageDialog(null, "Name and Surname must not be empty!", "Error", JOptionPane.ERROR_MESSAGE );
    
}
 

    }//GEN-LAST:event_btn_MedicalStaff_SaveActionPerformed

     private void refreshPreviousAppointmentsTable() {
        dtm_previousAppointments.setRowCount(0);
        setUpPreviousAppointmentsTable();
    }
     
      private void refreshFutureAppointmentsTable() {
        dtm_futureAppointments.setRowCount(0);
        setUpFutureAppointmentsTable();
    }
    
     private void refreshPatientsTable() {
        dtm_Patients.setRowCount(0);
        setUpPatientTable();
    }
    
    private void refreshDoctorsTable() {
        dtm_MedicalStaff.setRowCount(0);
        setUpDoctorTable();
    }

    private void btn_MedicalStaff_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MedicalStaff_UpdateActionPerformed

        CardLayout cl = (CardLayout) (pnl_MedicalStaff_UpdateSave.getLayout());
        cl.show(pnl_MedicalStaff_UpdateSave, "card_MS_Save"); 
       
        if (!(txt_MedicalStaff_Name.getText().isEmpty()) && (!txt_MedicalStaff_Surname.getText().isEmpty())) {
            doctorsBL.updateDoctor(doctorIDForUpdate, CreateDoctor());
            clearTextFields(pnl_MedicalStaff_NorthBorder);
            refreshDoctorsTable();
        } else {
            JOptionPane.showMessageDialog(null, "Name and Surname must not be empty!", "Error", JOptionPane.ERROR_MESSAGE);

        }
       
    }//GEN-LAST:event_btn_MedicalStaff_UpdateActionPerformed

    private void btn_MedicalStaff_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MedicalStaff_EditActionPerformed
        if(!table_MedicalStaff_List.getSelectionModel().isSelectionEmpty()){        
       doctorIDForUpdate = (int)table_MedicalStaff_List.getModel().getValueAt(table_MedicalStaff_List.getSelectedRow(), 3);
      
       Doctor doctor = allDoctors.stream().filter(it -> it.getIddoctor() == doctorIDForUpdate).findFirst().orElse(null);
    
       txt_MedicalStaff_Name.setText(doctor.getName());
       txt_MedicalStaff_Surname.setText(doctor.getSurname());
       ddl_MedicalStaff_Specialization.setSelectedIndex(doctor.getSpecialization()-1);
       CardLayout cl = (CardLayout) (pnl_MedicalStaff_UpdateSave.getLayout());
        cl.show(pnl_MedicalStaff_UpdateSave, "card_MS_Update"); 
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Doctor first!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_MedicalStaff_EditActionPerformed

    private void btn_MedicalStaff_ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MedicalStaff_ResetActionPerformed
        clearTextFields(pnl_MedicalStaff_NorthBorder);
    }//GEN-LAST:event_btn_MedicalStaff_ResetActionPerformed

    private void btn_MedicalStaff_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_MedicalStaff_FilterActionPerformed
       TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) table_MedicalStaff_List.getModel())); 
    sorter.setRowFilter(RowFilter.regexFilter(txt_MedicalStaff_Filter.getText()));

    table_MedicalStaff_List.setRowSorter(sorter);
    }//GEN-LAST:event_btn_MedicalStaff_FilterActionPerformed

    private void btn_menu_PatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_PatientsActionPerformed
          clearTextFields(pnl_ScheduleAppointment);
           clearTextFields(pnl_Patients);
        refreshPatientsTable();
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Patients");      
    }//GEN-LAST:event_btn_menu_PatientsActionPerformed

    private void btn_Patients_ShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Patients_ShowDetailsActionPerformed
  if(!table_Patients_List.getSelectionModel().isSelectionEmpty()){   
        
        patientIDForUpdate = (int)table_Patients_List.getModel().getValueAt(table_Patients_List.getSelectedRow(), 6);
       
       Patient patient = AllPatients.stream().filter(it -> it.getIdpatient() == patientIDForUpdate).findFirst().orElse(null);  
       patientShowDetails(patient);
        disableFieldsNoCB(tab_PatientDetails);
          CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_TabForm");   
        CardLayout cl_btnEdit = (CardLayout) (pnl_full_EditReset.getLayout());
        cl_btnEdit.show(pnl_full_EditReset, "card_btn_Edit");  
        CardLayout cl_btnUpdate = (CardLayout) (pnl_card_SaveUpdate.getLayout());
        cl_btnUpdate.show(pnl_card_SaveUpdate, "card_btn_Update"); 
  }else{
  JOptionPane.showMessageDialog(null, "Please select a Patient first!", "Error", JOptionPane.ERROR_MESSAGE);
  }
    }//GEN-LAST:event_btn_Patients_ShowDetailsActionPerformed

    private void btn_full_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_full_EditActionPerformed
        enableFields(tab_PatientDetails);
    }//GEN-LAST:event_btn_full_EditActionPerformed

    private void rb_full_Smoker_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_full_Smoker_NoActionPerformed
        txt_full_Smoker_PerDay.setEnabled(false);
    }//GEN-LAST:event_rb_full_Smoker_NoActionPerformed

    private void rb_full_ConsumeAlcohol_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_full_ConsumeAlcohol_NoActionPerformed
       txt_full_ConsumeAlcohol_PerDay.setEnabled(false);

    }//GEN-LAST:event_rb_full_ConsumeAlcohol_NoActionPerformed

    private void rb_full_Smoker_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_full_Smoker_YesActionPerformed
        txt_full_Smoker_PerDay.setEnabled(true);
    }//GEN-LAST:event_rb_full_Smoker_YesActionPerformed

    private void rb_full_ConsumeAlcohol_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_full_ConsumeAlcohol_YesActionPerformed
     txt_full_ConsumeAlcohol_PerDay.setEnabled(true);
    }//GEN-LAST:event_rb_full_ConsumeAlcohol_YesActionPerformed

    private void btn_Patients_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Patients_FilterActionPerformed
   TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) table_Patients_List.getModel())); 
    sorter.setRowFilter(RowFilter.regexFilter(txt_Patients_Filter.getText()));

    table_Patients_List.setRowSorter(sorter);

    }//GEN-LAST:event_btn_Patients_FilterActionPerformed

    private void btn_ScheduleAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ScheduleAppointmentActionPerformed
       if(!table_Patients_List.getSelectionModel().isSelectionEmpty()){   
        int IDPatient = (int)table_Patients_List.getModel().getValueAt(table_Patients_List.getSelectedRow(), 6);
       Patient patient = AllPatients.stream().filter(it -> it.getIdpatient() == IDPatient).findFirst().orElse(null); 
       lbl_ScheduleAppointment_Patient_Opid.setText((patient.getOpid() == null) ? "Not Added Yet" : patient.getOpid());
       lbl_ScheduleAppointment_Patient_Name_Surname.setText(patient.getName()+" "+patient.getSurname());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
       lbl_Schedule_Appointment_Patient_DateOfBirth.setText(sdf.format(patient.getDateOfBirth()));
       txt_ScheduleAppointment_Patient_Complaint.setText(patient.getStatementOfComplaint());
       refreshFutureAppointmentsTable();
       if(patient.getDoctorId() != null)
           ddl_ScheduleAppointment_Patient_Doctors.setSelectedItem(allDoctors.stream().filter(it -> it.getIddoctor() == patient.getDoctorId()).findFirst().get());
       
       dp_Appointment.setDate(java.sql.Date.valueOf(LocalDate.now()));
       TimeSpinner_Appointment.setValue(java.sql.Time.valueOf(LocalTime.now()));
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_ScheduleAppointment"); 
       }else{
           JOptionPane.showMessageDialog(null, "Please select a Patient first!", "Error", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_btn_ScheduleAppointmentActionPerformed

    private void btn_ScheduleAppointment_Patient_ScheduleAnAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ScheduleAppointment_Patient_ScheduleAnAppointmentActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");   
         SimpleDateFormat sdfTime = new SimpleDateFormat("HH:mm");
       String time ="";
  
        try {
            int IDPatient = (int) table_Patients_List.getModel().getValueAt(table_Patients_List.getSelectedRow(), 6);
            
            Object value = TimeSpinner_Appointment.getValue();
            if (value instanceof Date) {
                Date date = (Date) value;
                
                time = sdfTime.format(date);
                
            }
            boolean test = LocalTime.parse(time).isAfter(LocalTime.now());
            
            if(LocalDate.parse(sdf.format(dp_Appointment.getDate())).isAfter(LocalDate.now()) 
                    || (LocalDate.parse(sdf.format(dp_Appointment.getDate())).equals(LocalDate.now()) && LocalTime.parse(time).isAfter(LocalTime.now()))){
            if (CheckIfDoctorAvailable(((Doctor) ddl_ScheduleAppointment_Patient_Doctors.getSelectedItem()).getIddoctor(), LocalDate.parse(sdf.format(dp_Appointment.getDate())), LocalTime.parse(time))) {                
                appointmentsBL.addAppointment(IDPatient, ((Doctor) ddl_ScheduleAppointment_Patient_Doctors.getSelectedItem()).getIddoctor(), LocalDate.parse(sdf.format(dp_Appointment.getDate())), LocalTime.parse(time));
                patientsBL.AssignPatientToADoctor(IDPatient, ((Doctor) ddl_ScheduleAppointment_Patient_Doctors.getSelectedItem()).getIddoctor());
                JOptionPane.showMessageDialog(null, "Appointment successfully schedueld!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
                cl.show(pnl_backgroundCardLayout, "card_Appointments");
                clearTextFields(pnl_ScheduleAppointment);
                refreshFutureAppointmentsTable();
            } else {
                JOptionPane.showMessageDialog(null, "Doctor " + ((Doctor) ddl_ScheduleAppointment_Patient_Doctors.getSelectedItem()) + " is unavailable at specified time.Please pick a different time or a different doctor.", "Doctor Unavailable", JOptionPane.ERROR_MESSAGE);
            }
            }else{
                JOptionPane.showMessageDialog(null,"Appointment cannot be scheduled in the past!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
                            JOptionPane.showMessageDialog(null, "Invalid input", "Error", JOptionPane.ERROR_MESSAGE);

        }
        
    }//GEN-LAST:event_btn_ScheduleAppointment_Patient_ScheduleAnAppointmentActionPerformed

    
    private void btn_menu_AppointmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_AppointmentsActionPerformed
         clearTextFields(pnl_Appointments);
          clearTextFields(pnl_AccessAppointment_Appointment);
        
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Appointments"); 
        refreshPreviousAppointmentsTable();
        refreshFutureAppointmentsTable();
        
    }//GEN-LAST:event_btn_menu_AppointmentsActionPerformed

    private void btn_Appointments_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Appointments_FilterActionPerformed
        TableRowSorter<TableModel> sorterPrevious = new TableRowSorter<TableModel>(((DefaultTableModel)table_PreviousAppointments.getModel())); 
    sorterPrevious.setRowFilter(RowFilter.regexFilter(txt_Appointments_Filter.getText()));
     TableRowSorter<TableModel> sorterFuture = new TableRowSorter<TableModel>(((DefaultTableModel)table_FutureAppointments.getModel())); 
    sorterFuture.setRowFilter(RowFilter.regexFilter(txt_Appointments_Filter.getText()));
    table_FutureAppointments.setRowSorter(sorterFuture);
    table_PreviousAppointments.setRowSorter(sorterPrevious);
    }//GEN-LAST:event_btn_Appointments_FilterActionPerformed

    private void txt_Appointments_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_Appointments_FilterActionPerformed
        TableRowSorter<TableModel> sorterPrevious = new TableRowSorter<TableModel>(((DefaultTableModel)table_PreviousAppointments.getModel())); 
    sorterPrevious.setRowFilter(RowFilter.regexFilter(txt_Appointments_Filter.getText()));
     TableRowSorter<TableModel> sorterFuture = new TableRowSorter<TableModel>(((DefaultTableModel)table_FutureAppointments.getModel())); 
    sorterFuture.setRowFilter(RowFilter.regexFilter(txt_Appointments_Filter.getText()));
    table_FutureAppointments.setRowSorter(sorterFuture);
    table_PreviousAppointments.setRowSorter(sorterPrevious);
    }//GEN-LAST:event_txt_Appointments_FilterActionPerformed

    private void btn_Appointments_Access_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Appointments_Access_OpenActionPerformed
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    
        if(!table_FutureAppointments.getSelectionModel().isSelectionEmpty()){   
 
        clearTextFields(pnl_Access_Appointment);
        enableFields(pnl_Access_Appointment);
        AddDocumentListenersForBill();
        int IdAppointment = (int)table_FutureAppointments.getModel().getValueAt(table_FutureAppointments.getSelectedRow(), 4);
       Appointment appointment = futureAppointments.stream().filter(it -> it.getIdappointment()== IdAppointment).findFirst().orElse(null); 
       lbl_AccessAppointment_PatientDetails_Opid.setText(appointment.getPatient().getOpid());
       lbl_AccessAppointment_PatientDetails_Name_Surname.setText(appointment.getPatient().getName() + " "+ appointment.getPatient().getSurname());
       lbl_AccessAppointment_PatientDetails_DateOfBirth.setText(sdf.format(appointment.getPatient().getDateOfBirth()));
       lbl_AccessAppointment_PatientDetails_StatementOfComplaint.setText(appointment.getPatient().getStatementOfComplaint());
       lbl_AccessAppointment_DoctorName.setText(appointment.getDoctorByDoctorId().getName() + " " +appointment.getDoctorByDoctorId().getSurname());
       disableFieldsNoCB(pnl_AccessAppointment_Referal);
       disableFieldsNoCB(pnl_AccessAppointment_Followup);        
       dp_AccessAppointment_Followup.setDate(java.sql.Date.valueOf(LocalDate.now()));
       TimeSpinner_AccessAppointment_Followup.setValue(java.sql.Time.valueOf(LocalTime.now()));
       lbl_Bill_Patient.setText(appointment.getPatient().getName() + " "+ appointment.getPatient().getSurname());
       List<Bill> allBills = othersBL.getAllBills();
      lbl_Bill_Number.setText(String.valueOf(allBills.size()+1));

        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Access_Appointment"); 
        
        }else{
            JOptionPane.showMessageDialog(null, "Please select an Appointment first!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_Appointments_Access_OpenActionPerformed

    private void btn_Appointments_Access_ClosedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Appointments_Access_ClosedActionPerformed
         if(!table_PreviousAppointments.getSelectionModel().isSelectionEmpty()){   
        clearTextFields(pnl_Access_Appointment);
        RemoveDocumentListenersForBill();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        int IdAppointment = (int)table_PreviousAppointments.getModel().getValueAt(table_PreviousAppointments.getSelectedRow(), 4);
       Appointment appointment = previousAppointments.stream().filter(it -> it.getIdappointment()== IdAppointment).findFirst().orElse(null); 
       List<Item> allItems = othersBL.getAllItems();
       List<Item> itemsForThisAppointment = allItems.stream().filter(it -> it.getBill().getIdbill() == appointment.getBill().getIdbill()).collect(Collectors.toList());
       lbl_AccessAppointment_PatientDetails_Opid.setText(appointment.getPatient().getOpid());
       lbl_AccessAppointment_PatientDetails_Name_Surname.setText(appointment.getPatient().getName() + " "+ appointment.getPatient().getSurname());
       lbl_AccessAppointment_PatientDetails_DateOfBirth.setText(sdf.format(appointment.getPatient().getDateOfBirth()));
       lbl_AccessAppointment_PatientDetails_StatementOfComplaint.setText(appointment.getPatient().getStatementOfComplaint());
       lbl_AccessAppointment_DoctorName.setText(appointment.getDoctorByDoctorId().getName() + " " +appointment.getDoctorByDoctorId().getSurname());
       txt_AccessAppointment_Diagnosis.setText(appointment.getDiagnosis());
       txt_AccessAppointment_Prescription .setText(appointment.getPrescription());
       txt_AccessAppointment_LabTests.setText(appointment.getLabTests());
        lbl_Bill_Patient.setText(appointment.getPatient().getName() + " "+ appointment.getPatient().getSurname());
       Item appointmentCostItem = itemsForThisAppointment.stream().filter(it->it.getItemName().equals(lbl_Bill_AppointmentCost.getText().substring(0, lbl_Bill_AppointmentCost.getText().length() - 1))).findFirst().orElse(null);
      if(appointmentCostItem != null)
       txt_Bill_AppointmentCost.setText(String.valueOf(appointmentCostItem.getPrice()));
      Item prescriptionCostItem = itemsForThisAppointment.stream().filter(it->it.getItemName().equals(lbl_Bill_Perscription_Cost.getText().substring(0, lbl_Bill_Perscription_Cost.getText().length() - 1))).findFirst().orElse(null);
      if(prescriptionCostItem != null)
      txt_Bill_Perscription_Cost.setText(String.valueOf(prescriptionCostItem.getPrice()));
      Item labTestCostItem = itemsForThisAppointment.stream().filter(it->it.getItemName().equals(lbl_Bill_LabTest_Cost.getText().substring(0, lbl_Bill_LabTest_Cost.getText().length() - 1))).findFirst().orElse(null);
      if(labTestCostItem != null)
      txt_Bill_LaboratoryTest_Cost.setText(String.valueOf(labTestCostItem.getPrice()));
       lbl_Bill_Total.setText(String.valueOf(appointment.getBill().getTotal())+"$");
       lbl_Bill_Number.setText(String.valueOf(appointment.getBill().getIdbill()));
       ddl_Bill_PaymentType.setSelectedIndex((appointment.getBill().getPaymentType().getIdpaymentType())-1);
       if(appointment.getDoctorByReference() != null){
       Doctor doctor = allDoctors.stream().filter(it -> it.getIddoctor() == appointment.getDoctorByReference().getIddoctor()).findFirst().orElse(appointment.getDoctorByDoctorId());

          ddl_AccessAppointment_Specialization.setSelectedIndex(doctor.getSpecialization()-1);
      ddl_AccessAppointment_Doctor.setSelectedItem(doctor);
       }
       if(appointment.getFollowUp() != null){
           dp_AccessAppointment_Followup.setDate(appointment.getFollowUp());
           TimeSpinner_AccessAppointment_Followup.setValue(appointment.getFollowUp());
       }
       disableFields(pnl_Access_Appointment);
        
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Access_Appointment"); 
         }else{
                JOptionPane.showMessageDialog(null, "Please select an Appointment first!", "Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_btn_Appointments_Access_ClosedActionPerformed

    private void ddl_AccessAppointment_SpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddl_AccessAppointment_SpecializationActionPerformed
        List<Doctor> specificDoctors = allDoctors.stream().filter(it -> it.getSpecialization() == (ddl_AccessAppointment_Specialization.getSelectedIndex()+1)).collect(Collectors.toList());
        DefaultComboBoxModel cbm = new DefaultComboBoxModel(specificDoctors.toArray());
       ddl_AccessAppointment_Doctor.setModel(cbm);
    }//GEN-LAST:event_ddl_AccessAppointment_SpecializationActionPerformed

    private void cb_AccessAppointment_ReferenceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_AccessAppointment_ReferenceItemStateChanged
             if(evt.getStateChange() == ItemEvent.SELECTED){
        enableFields(pnl_AccessAppointment_Referal);
       }else{
        disableFieldsNoCB(pnl_AccessAppointment_Referal);
       }
    }//GEN-LAST:event_cb_AccessAppointment_ReferenceItemStateChanged

    private void cb_AccessAppointment_FollowupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_AccessAppointment_FollowupItemStateChanged
            if(evt.getStateChange() == ItemEvent.SELECTED){
        enableFields(pnl_AccessAppointment_Followup);
       }else{
        disableFieldsNoCB(pnl_AccessAppointment_Followup);
       }
    }//GEN-LAST:event_cb_AccessAppointment_FollowupItemStateChanged

    private void btn_AccessAppointment_CloseAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AccessAppointment_CloseAppointmentActionPerformed
        try {
            Boolean canSwitch = true;
            int IdAppointment = (int) table_FutureAppointments.getModel().getValueAt(table_FutureAppointments.getSelectedRow(), 4);
            Appointment appointment = futureAppointments.stream().filter(it -> it.getIdappointment() == IdAppointment).findFirst().orElse(null);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");            
            String total = lbl_Bill_Total.getText().substring(0, lbl_Bill_Total.getText().length() - 1);
            String time = "";
            
            int billId = othersBL.addBills(Integer.valueOf(total), ddl_Bill_PaymentType.getSelectedIndex() + 1);
            if (lbl_Bill_AppointmentCost.isSelected()) {
                othersBL.addItem(billId, lbl_Bill_AppointmentCost.getText().substring(0, lbl_Bill_AppointmentCost.getText().length() - 1), Integer.valueOf(txt_Bill_AppointmentCost.getText()));
            }
            if (lbl_Bill_Perscription_Cost.isSelected()) {
                othersBL.addItem(billId, lbl_Bill_Perscription_Cost.getText().substring(0, lbl_Bill_Perscription_Cost.getText().length() - 1), Integer.valueOf(txt_Bill_Perscription_Cost.getText()));
                
            }
            if (lbl_Bill_LabTest_Cost.isSelected()) {
                othersBL.addItem(billId, lbl_Bill_LabTest_Cost.getText().substring(0, lbl_Bill_LabTest_Cost.getText().length() - 1), Integer.valueOf(txt_Bill_LaboratoryTest_Cost.getText()));
            }
            int referalDoctorId = ((Doctor) ddl_AccessAppointment_Doctor.getSelectedItem()).getIddoctor();            
            
            Object value = TimeSpinner_AccessAppointment_Followup.getValue();
            if (value instanceof Date) {
                Date date = (Date) value;
                SimpleDateFormat format = new SimpleDateFormat("HH:mm");
                time = format.format(date);
            }
            if (cb_AccessAppointment_Reference.isSelected() && cb_AccessAppointment_Followup.isSelected()) {
                  if(LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())).isAfter(LocalDate.now()) 
                    || (LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())).equals(LocalDate.now()) && LocalTime.parse(time).isAfter(LocalTime.now()))){

                appointmentsBL.updateAppointment(IdAppointment, txt_AccessAppointment_Diagnosis.getText(), txt_AccessAppointment_Prescription.getText(), txt_AccessAppointment_LabTests.getText(), billId, referalDoctorId, LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())), LocalTime.parse(time));
                appointmentsBL.addAppointment(appointment.getPatient().getIdpatient(), referalDoctorId, LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())), LocalTime.parse(time));
               }else{
                      canSwitch = false;
                        JOptionPane.showMessageDialog(null, "Follow up appointment cannot be scheduled in the past!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                  }
            if (!cb_AccessAppointment_Reference.isSelected() && cb_AccessAppointment_Followup.isSelected()) {
                   if(LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())).isAfter(LocalDate.now()) 
                    || (LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())).equals(LocalDate.now()) && LocalTime.parse(time).isAfter(LocalTime.now()))){

                appointmentsBL.updateAppointment(IdAppointment, txt_AccessAppointment_Diagnosis.getText(), txt_AccessAppointment_Prescription.getText(), txt_AccessAppointment_LabTests.getText(), billId, LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())), LocalTime.parse(time));
                appointmentsBL.addAppointment(appointment.getPatient().getIdpatient(), appointment.getDoctorByDoctorId().getIddoctor(), LocalDate.parse(sdf.format(dp_AccessAppointment_Followup.getDate())), LocalTime.parse(time));
                    }else{
                       canSwitch = false;
                        JOptionPane.showMessageDialog(null, "Follow up appointment cannot be scheduled in the past!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                   }
            if (cb_AccessAppointment_Reference.isSelected() && !cb_AccessAppointment_Followup.isSelected()) {
               
                appointmentsBL.updateAppointment(IdAppointment, txt_AccessAppointment_Diagnosis.getText(), txt_AccessAppointment_Prescription.getText(), txt_AccessAppointment_LabTests.getText(), billId, referalDoctorId);
              
                 }
            if (!cb_AccessAppointment_Reference.isSelected() && !cb_AccessAppointment_Followup.isSelected()) {
                appointmentsBL.updateAppointment(IdAppointment, txt_AccessAppointment_Diagnosis.getText(), txt_AccessAppointment_Prescription.getText(), txt_AccessAppointment_LabTests.getText(), billId);
            }
            if(canSwitch){
            CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
            cl.show(pnl_backgroundCardLayout, "card_Appointments");            
            
            refreshFutureAppointmentsTable();
            refreshPreviousAppointmentsTable();
            clearTextFields(pnl_Access_Appointment);
            }
        } catch (Exception ex) {
   JOptionPane.showMessageDialog(null,  "Invalid input!", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btn_AccessAppointment_CloseAppointmentActionPerformed

    private void lbl_Bill_AppointmentCostItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lbl_Bill_AppointmentCostItemStateChanged
             if(evt.getStateChange() == ItemEvent.SELECTED){
                 txt_Bill_AppointmentCost.setEditable(true);
       }else{
          txt_Bill_AppointmentCost.setEditable(false);
       }
    }//GEN-LAST:event_lbl_Bill_AppointmentCostItemStateChanged

    private void lbl_Bill_Perscription_CostItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lbl_Bill_Perscription_CostItemStateChanged
             if(evt.getStateChange() == ItemEvent.SELECTED){
                 txt_Bill_Perscription_Cost.setEditable(true);
       }else{
          txt_Bill_Perscription_Cost.setEditable(false);
             }
    }//GEN-LAST:event_lbl_Bill_Perscription_CostItemStateChanged

    private void lbl_Bill_LabTest_CostItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lbl_Bill_LabTest_CostItemStateChanged
          if(evt.getStateChange() == ItemEvent.SELECTED){
                 txt_Bill_LaboratoryTest_Cost.setEditable(true);
       }else{
          txt_Bill_LaboratoryTest_Cost.setEditable(false);
          }
    }//GEN-LAST:event_lbl_Bill_LabTest_CostItemStateChanged

    private void tab_AppointmentsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tab_AppointmentsStateChanged
if(tab_Appointments.getSelectedIndex() == 0)  {
        CardLayout cl = (CardLayout) (pnl_Appointment_Access_Card.getLayout());
        cl.show(pnl_Appointment_Access_Card, "card_btn_open"); 
}else{
     CardLayout cl = (CardLayout) (pnl_Appointment_Access_Card.getLayout());
        cl.show(pnl_Appointment_Access_Card, "card_btn_closed"); 
}
    }//GEN-LAST:event_tab_AppointmentsStateChanged

    private void btn_menu_StatisticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menu_StatisticsActionPerformed
       
        lbl_StatisticsDaily_newPatients.setText(String.valueOf(statisticsBL.getNumberOfNewPatientsToday()));
        lbl_StatisticsDaily_patientsSeen.setText(String.valueOf(statisticsBL.getNumberOfPatientAppointmentsToday()));
        lbl_StatisticsDaily_followUpPatients.setText(String.valueOf(statisticsBL.getNumberOfFolloweUpPatientsToday()));
        lbl_StatisticsDaily_medicinesprescribed.setText(String.valueOf(statisticsBL.getNumberOfMedicinePrescribedToday()));
        lbl_StatisticsDaily_totalFeesCharged.setText(String.valueOf(statisticsBL.getTotalFeeToday())+"$");
        lbl_StatisticsDaily_testsOrdered.setText(String.valueOf(statisticsBL.getNumberOfTestsOrderedToday()));
  
        CardLayout cl = (CardLayout) (pnl_backgroundCardLayout.getLayout());
        cl.show(pnl_backgroundCardLayout, "card_Statistics"); 
    }//GEN-LAST:event_btn_menu_StatisticsActionPerformed

    private void btn_Statistics_chooseYearMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Statistics_chooseYearMonthActionPerformed
  setUpPatientsPerMonthCharts(yearChooser_Statistics.getYear(),monthChooser_Statistics.getMonth()+1);        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Statistics_chooseYearMonthActionPerformed

    private void btn_Statistics_chooseWeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Statistics_chooseWeekActionPerformed
       setUpPatientsPerWeekCharts(yearChooser_Statistics.getYear(),monthChooser_Statistics.getMonth()+1);
    }//GEN-LAST:event_btn_Statistics_chooseWeekActionPerformed

    private void txt_MedicalStaff_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_MedicalStaff_FilterActionPerformed
       TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) table_MedicalStaff_List.getModel())); 
    sorter.setRowFilter(RowFilter.regexFilter(txt_MedicalStaff_Filter.getText()));

    table_MedicalStaff_List.setRowSorter(sorter);
    }//GEN-LAST:event_txt_MedicalStaff_FilterActionPerformed

    private void txt_Patients_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_Patients_FilterActionPerformed
         TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) table_Patients_List.getModel())); 
    sorter.setRowFilter(RowFilter.regexFilter(txt_Patients_Filter.getText()));

    table_Patients_List.setRowSorter(sorter);
    }//GEN-LAST:event_txt_Patients_FilterActionPerformed

    private void ddl_Statistics_DoctorsPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddl_Statistics_DoctorsPatientsActionPerformed
       YearMonth days =  YearMonth.of(yearChooser_Statistics.getYear(),monthChooser_Statistics.getMonth()+1);
       int numberOfPatientsPerDoctorForMonth = 0;
        int numberOfPatientsPerDoctorForWeek = 0;
        for (int i = 1; i <= days.lengthOfMonth(); i++) {
        numberOfPatientsPerDoctorForMonth += statisticsBL.averagePatientsPerMonthPerDoctor(((Doctor)ddl_Statistics_DoctorsPatients.getSelectedItem()),i,yearChooser_Statistics.getYear(), monthChooser_Statistics.getMonth()+1);
        }
        
        for (int i = 1; i <= 7; i++) {
      numberOfPatientsPerDoctorForWeek += statisticsBL.averagePatientsPerWeekPerDoctor(((Doctor)ddl_Statistics_DoctorsPatients.getSelectedItem()),i,yearChooser_Statistics.getYear(), monthChooser_Statistics.getMonth()+1, weekSpinner_Statistics.getValue());
        }
        lbl_Statistics_averagepatientspermontha.setText(String.valueOf(numberOfPatientsPerDoctorForMonth));
        lbl_Statistics_averagepatientsperweek.setText(String.valueOf(numberOfPatientsPerDoctorForWeek));
    }//GEN-LAST:event_ddl_Statistics_DoctorsPatientsActionPerformed

    private void pnl_backgroundCardLayoutComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnl_backgroundCardLayoutComponentHidden
 clearTextFields(pnl_backgroundCardLayout);        // TODO add your handling code here:
    }//GEN-LAST:event_pnl_backgroundCardLayoutComponentHidden

     private void setUpPatientsPerWeekCharts(int year,int month) {
     
         
         
         
        XYSeries newPatients = new XYSeries("New Patients for Week - " + weekSpinner_Statistics.getValue());
        XYSeries followUpPatients = new XYSeries("Follow-Up Patients for Week - " + weekSpinner_Statistics.getValue());
        for (int i = 1; i <= 7; i++){
            newPatients.add(i,statisticsBL.newPatientsPerDayForWeek(weekSpinner_Statistics.getValue(), i, year, month));
            followUpPatients.add(i,statisticsBL.FollowUpPatientsPerDayForWeek(weekSpinner_Statistics.getValue(), i, year, month));
        }
        
        XYSeriesCollection newPatientsDataset = new XYSeriesCollection(newPatients);
        XYSeriesCollection followUpPatientsDataset = new XYSeriesCollection(followUpPatients);
        JFreeChart newPatientsChart = ChartFactory.createXYLineChart(null, "Days", "new patients", newPatientsDataset);
        JFreeChart followUpPatientsChart = ChartFactory.createXYLineChart(null, "Days", "follow-up patients", followUpPatientsDataset);
        XYPlot newPatientsPlot = (XYPlot)newPatientsChart.getPlot();
         XYPlot followUpPatientsPlot = (XYPlot)followUpPatientsChart.getPlot();
        NumberAxis newPatientsAxis = (NumberAxis)newPatientsPlot.getRangeAxis();
        NumberAxis newPatientsAxisX = (NumberAxis)newPatientsPlot.getDomainAxis();
        NumberAxis followUpPatientsAxis = (NumberAxis)followUpPatientsPlot.getRangeAxis();
        NumberAxis followUpPatientsAxisX = (NumberAxis)followUpPatientsPlot.getDomainAxis();
        newPatientsAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        newPatientsAxisX.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        followUpPatientsAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        followUpPatientsAxisX.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        XYLineAndShapeRenderer newPatientsRenderer = new XYLineAndShapeRenderer( );
        newPatientsRenderer.setSeriesPaint(0, Color.BLUE);
        newPatientsPlot.setRenderer(newPatientsRenderer);
        followUpPatientsPlot.setRenderer(newPatientsRenderer);
        XYLineAndShapeRenderer followUpPatientsRenderer = new XYLineAndShapeRenderer( );
        followUpPatientsRenderer.setSeriesPaint(0, Color.BLUE);
        ChartPanel newPatientsChartPanel = new ChartPanel(newPatientsChart);
         ChartPanel followUpPatientsChartPanel = new ChartPanel(followUpPatientsChart);
        pnl_Statistics_chart_newPatientsPerWeek.add(newPatientsChartPanel, BorderLayout.CENTER);
        pnl_Statistics_FollowUpPatientsPerWeek.add(followUpPatientsChartPanel, BorderLayout.CENTER);
        pnl_Statistics_chart_newPatientsPerWeek.revalidate();
        pnl_Statistics_FollowUpPatientsPerWeek.revalidate();
        ddl_Statistics_DoctorsPatients.setEnabled(true);

    }
    
    private void setUpPatientsPerMonthCharts(int year,int month) {
          LocalDate date = LocalDate.of(year, month, 1);
        weekSpinner_Statistics.setMaximum((int) IsoFields.WEEK_OF_WEEK_BASED_YEAR.rangeRefinedBy(date).getMaximum());
        weekSpinner_Statistics.setMinimum(1);
        weekSpinner_Statistics.setEnabled(true);
        
         YearMonth days =  YearMonth.of(year,month);
        XYSeries newPatients = new XYSeries("New Patients for Month - " + days.getMonth().toString());
        XYSeries followUpPatients = new XYSeries("Follow-Up Patients for Month - " + days.getMonth().toString());
        for (int i = 1; i <= days.lengthOfMonth() ; i++){
            newPatients.add(i,statisticsBL.newPatientsPerDay(i, days.getYear(), days.getMonthValue()));
            followUpPatients.add(i,statisticsBL.FollowUpPatientsPerDay(i, days.getYear(), days.getMonthValue()));
        }
        
        XYSeriesCollection newPatientsDataset = new XYSeriesCollection(newPatients);
        XYSeriesCollection followUpPatientsDataset = new XYSeriesCollection(followUpPatients);
        JFreeChart newPatientsChart = ChartFactory.createXYLineChart(null, "Days", "new patients", newPatientsDataset);
        JFreeChart followUpPatientsChart = ChartFactory.createXYLineChart(null, "Days", "follow-up patients", followUpPatientsDataset);
        XYPlot newPatientsPlot = (XYPlot)newPatientsChart.getPlot();
        XYPlot followUpPatientsPlot = (XYPlot)followUpPatientsChart.getPlot();
        NumberAxis newPatientsAxis = (NumberAxis)newPatientsPlot.getRangeAxis();
         NumberAxis followUpPatientsAxis = (NumberAxis)followUpPatientsPlot.getRangeAxis();
        newPatientsAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        followUpPatientsAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        ChartPanel newPatientsChartPanel = new ChartPanel(newPatientsChart);
        ChartPanel followUpPatientsChartPanel = new ChartPanel(followUpPatientsChart);
        
        
                
        pnl_Statistics_chart_newPatients.add(newPatientsChartPanel, BorderLayout.CENTER);
        pnl_Statistics_FollowUpPatients.add(followUpPatientsChartPanel, BorderLayout.CENTER);
        pnl_Statistics_chart_newPatients.revalidate();
        pnl_Statistics_FollowUpPatients.revalidate();
    }
    
  DocumentListener dl = new DocumentListener() {

                @Override
                public void insertUpdate(DocumentEvent e) {
                  sumTotal();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                   sumTotal();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                 sumTotal();
                }
  };

  private void sumTotal(){
      Integer total = 0;
      if(!txt_Bill_AppointmentCost.getText().isEmpty()){
          total = total + errorIfNotANumber(lbl_Bill_AppointmentCost, txt_Bill_AppointmentCost);
      }
      if(!txt_Bill_LaboratoryTest_Cost.getText().isEmpty()){
          total = total + errorIfNotANumber(lbl_Bill_LabTest_Cost, txt_Bill_LaboratoryTest_Cost);
      }
      if (!txt_Bill_Perscription_Cost.getText().isEmpty()){
                      total = total + errorIfNotANumber(lbl_Bill_Perscription_Cost, txt_Bill_Perscription_Cost);
                  }
      lbl_Bill_Total.setText(total.toString()+"$");
  
  }
  
    private int errorIfNotANumber(JLabel label, JTextField textField){
     int number = 0;
     
        if(textField.getText().isEmpty())
           return number;
        
        try {
            number = Integer.parseInt(textField.getText());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(null, label.getText().substring(0, label.getText().length() - 1) + " field has to be a number!", "Error", JOptionPane.ERROR_MESSAGE );
           textField.requestFocus(); 
        }
        return -1;
    }
    
      private int errorIfNotANumber(JCheckBox cb, JTextField textField){
     int number = 0;
     
        if(textField.getText().isEmpty())
           return number;
        
        try {
            number = Integer.parseInt(textField.getText());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(null, cb.getText().substring(0, cb.getText().length() - 1) + " field has to be a number!", "Error", JOptionPane.ERROR_MESSAGE );
           textField.requestFocus(); 
        }
        return number;
    }
    
   private void resetContactPanels(JPanel panel){
        panel.removeAll();
        panel.revalidate();
        panel.repaint();
        addContactTextfield(panel);
    }
    
   private void clearTextFields(Container container) {
    for (Component c : container.getComponents()) {
        if (c instanceof JTextField) {
           ((JTextField)c).setText("");
        } else if(c instanceof JTextArea){
            ((JTextArea)c).setText("");
        }else
        if (c instanceof Container) {
           clearTextFields((Container)c);
        }
    }
}
   
   
    private Boolean checkIfFieldEmpty(Container container) {
    for (Component c : container.getComponents()) {
        if (c instanceof JTextField) {
           if(((JTextField)c).getText().isEmpty()){
              return true;
           }
        } else if(c instanceof JTextArea){
           if(((JTextArea)c).getText().isEmpty()){
             return true;
           }
        }else
        if (c instanceof Container) {
           checkIfFieldEmpty((Container)c);
        }
       
    }
     return false;
}
   
    private void disableFieldsNoCB(Container container) {
    for (Component c : container.getComponents()) {
        if (c instanceof JTextField) {
           ((JTextField)c).setEditable(false);
        } else if(c instanceof JTextArea){
            ((JTextArea)c).setEditable(false);
        } else if(c instanceof JRadioButton){
            ((JRadioButton)c).setEnabled(false);
        } else if(c instanceof JComboBox){
        ((JComboBox)c).setEnabled(false);
        } else if(c instanceof JButton){
        ((JButton)c).setEnabled(false);
        }else
        if (c instanceof Container) {
           disableFieldsNoCB((Container)c);
        }
    }
}

     private void disableFields(Container container) {
    for (Component c : container.getComponents()) {
        if (c instanceof JTextField) {
           ((JTextField)c).setEditable(false);
        } else if(c instanceof JTextArea){
            ((JTextArea)c).setEditable(false);
        } else if(c instanceof JRadioButton){
            ((JRadioButton)c).setEnabled(false);
        }else if(c instanceof JCheckBox){
        ((JCheckBox)c).setEnabled(false);
        } else if(c instanceof JComboBox){
        ((JComboBox)c).setEnabled(false);
        } else if(c instanceof JButton){
        ((JButton)c).setEnabled(false);
        }else
        if (c instanceof Container) {
           disableFields((Container)c);
        }
    }
}

  
    private void enableFields(Container container) {
    for (Component c : container.getComponents()) {
        if (c instanceof JTextField) {
           ((JTextField)c).setEditable(true);
        } else if(c instanceof JTextArea){
            ((JTextArea)c).setEditable(true);
        } else if(c instanceof JRadioButton){
            ((JRadioButton)c).setEnabled(true);
        } else if(c instanceof JComboBox){
        ((JComboBox)c).setEnabled(true);
        } else if(c instanceof JCheckBox){
        ((JCheckBox)c).setEnabled(true);
        }else if(c instanceof JButton){
        ((JButton)c).setEnabled(true);
        }else
        if (c instanceof Container) {
           enableFields((Container)c);
        }
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VirgoHospital_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VirgoHospital_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VirgoHospital_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VirgoHospital_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VirgoHospital_GUI().setVisible(true);
            }
        });
    }
    
    private void addContactTextfield(JPanel panel){
        if(panel.getComponentCount()< 6){
        JTextField ContactTb = new JTextField();
        ContactTb.setPreferredSize(new Dimension(200, 28));
        panel.revalidate();
        panel.add(ContactTb);
        }
    }
    
     private void addContactTextfieldWithValues(JPanel panel, String contact){
        JTextField ContactTb = new JTextField();
        ContactTb.setPreferredSize(new Dimension(200, 28));
        ContactTb.setText(contact);
        panel.revalidate();
        panel.add(ContactTb);
        
    }

    private boolean checkRadioButtons(JRadioButton rb){
     if(rb.isSelected()){
          return true;
       }else{
           return false;
       }
    }
    
    private void setUpPatientTable(){
    dtm_Patients.setColumnIdentifiers(Patient.patientColumns());
    allNextOfKin = patientsBL.getAllNextOfKin();
    AllPatients = patientsBL.getAllPatients();
     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    Object[] rows2 = AllPatients.toArray();
   String opid ="";
    for(int i = 0; i<AllPatients.size();i++){
         opid = "Not added yet";   
        Object[] row = new Object[Patient.patientColumns().length];
        if(AllPatients.get(i).getOpid() != null)opid=AllPatients.get(i).getOpid();
        row[0] =opid;
        row[1] = AllPatients.get(i).getName();
        row[2] = AllPatients.get(i).getMiddleName();
        row[3] = AllPatients.get(i).getSurname();
        row[4] = sdf.format(AllPatients.get(i).getDateOfBirth());
        row[5] = SexToString(AllPatients.get(i).getSexId());
        row[6] = AllPatients.get(i).getIdpatient();
        row[7] = AllPatients.get(i).getPresentAddressStreet() + " (" + AllPatients.get(i).getPresentAddressDoorNo() +")," + AllPatients.get(i).getPresentAddressCity()+", "+AllPatients.get(i).getPresentAddressState();
       if(row[7].toString().startsWith("null"))row[7] = "not added yet";
        row[8] = AllPatients.get(i).getPermanentAddressStreet()+ " (" + AllPatients.get(i).getPermanentAddressDoorNo() +")," + AllPatients.get(i).getPermanentAddressCity()+", "+AllPatients.get(i).getPermanentAddressState();
        if(row[8].toString().startsWith("null"))row[8] = "not added yet";
        row[9] = getPatientNextOfKinToTableRow(allNextOfKin, i);
        dtm_Patients.addRow(row);
    }
     table_Patients_List.setModel(dtm_Patients);
   table_Patients_List.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
    TableColumnModel tcm = table_Patients_List.getColumnModel();
tcm.getColumn(0).setPreferredWidth(150);  
tcm.getColumn(1).setPreferredWidth(150);    
tcm.getColumn(2).setPreferredWidth(150);    
tcm.getColumn(3).setPreferredWidth(150); 
tcm.getColumn(4).setPreferredWidth(150);     
tcm.getColumn(5).setPreferredWidth(150);   
tcm.getColumn(7).setPreferredWidth(300);
tcm.getColumn(8).setPreferredWidth(300);
tcm.getColumn(9).setPreferredWidth(200);
    // skrivanje id kolone
    
    table_Patients_List.setRowHeight(30);
    TableColumn colId = table_Patients_List.getColumnModel().getColumn(6);
   colId.setMinWidth(0);
    colId.setPreferredWidth(0);
    colId.setMaxWidth(0);
    
   dtm_Patients.addTableModelListener((TableModelEvent tme) -> {
            DefaultTableModel tm = (DefaultTableModel) tme.getSource();
        });
}
    
    private String getPatientNextOfKinToTableRow(List<NextOfKin> allNextOfKin, int i){
        String name="";
        String surname = "";
        String relationship = "";
        if(allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == AllPatients.get(i).getIdpatient()).findFirst().orElse(null) != null){
       name = allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == AllPatients.get(i).getIdpatient()).findFirst().orElse(null).getName();
       surname = allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == AllPatients.get(i).getIdpatient()).findFirst().orElse(null).getSurname();
       relationship = allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == AllPatients.get(i).getIdpatient()).findFirst().orElse(null).getRelationshipToOutpatient();
       return name + " " + surname + " (" + relationship + ")";
        }else{
        return "not added yet";
    }
   
    }
    
    
    private void AddDocumentListenersForBill(){
                  txt_Bill_AppointmentCost.getDocument().addDocumentListener(dl);
  txt_Bill_Perscription_Cost.getDocument().addDocumentListener(dl);
  txt_Bill_LaboratoryTest_Cost.getDocument().addDocumentListener(dl); 
    }
    
       private void RemoveDocumentListenersForBill(){
  txt_Bill_AppointmentCost.getDocument().removeDocumentListener(dl);
  txt_Bill_Perscription_Cost.getDocument().removeDocumentListener(dl);
  txt_Bill_LaboratoryTest_Cost.getDocument().removeDocumentListener(dl); 
    }
    
    private String SexToString(int sexId){
        if(sexId == 1){
            return "Male";
        }else{
            return "Female";
        }
    }
    
    private Integer checkIfNull(Integer number){
        if(number == null){
            return 0;
        }else{
            return number;
        }
        
    }

    
    private Boolean CheckIfDoctorAvailable(int iddoctor, LocalDate appointmentDate, LocalTime appointmentTime) {
        LocalDateTime appointmentDateTime = LocalDateTime.of(appointmentDate.getYear(), appointmentDate.getMonth(), appointmentDate.getDayOfMonth(),appointmentTime.getHour(), appointmentTime.getMinute());
     List<Appointment> openAppointments =  appointmentsBL.getOpenAppointments();
     List<Appointment> openAppointmentsForDoctor = openAppointments.stream().filter(it -> it.getDoctorByDoctorId().getIddoctor() == iddoctor).collect(Collectors.toList());
   int AppointmentsCount =  openAppointmentsForDoctor.stream().filter(it -> 
             ((appointmentDateTime.isAfter(it.getAppointmentTime().toLocalDateTime().minusMinutes(30))) &&
                     (appointmentDateTime.isBefore(it.getAppointmentTime().toLocalDateTime().plusMinutes(30))))).collect(Collectors.toList()).size();
     
     if(AppointmentsCount == 0)
       return true;
     else
         return false;
    }

    
    private void setUpPreviousAppointmentsTable(){
    dtm_previousAppointments.setColumnIdentifiers(Appointment.appointments_Previous());
    previousAppointments = appointmentsBL.getClosedAppointments();
     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy - HH:mm");
    Object[] rows2 = previousAppointments.toArray();
           
    for(int i = 0; i<previousAppointments.size();i++){
        Object[] row = new Object[Appointment.appointments_Previous().length];
        row[0] = (previousAppointments.get(i).getPatient().getName()+" "+previousAppointments.get(i).getPatient().getSurname());
        row[1] = previousAppointments.get(i).getPatient().getStatementOfComplaint();
        row[2] = (previousAppointments.get(i).getDoctorByDoctorId().getName() + " "+ previousAppointments.get(i).getDoctorByDoctorId().getSurname());
        row[3] = sdf.format(previousAppointments.get(i).getAppointmentTime());
        row[4] = previousAppointments.get(i).getIdappointment();
        row[5] = previousAppointments.get(i).getDiagnosis()==null ? "none" :  previousAppointments.get(i).getDiagnosis();
        row[6] = previousAppointments.get(i).getPrescription()==null ? "none": previousAppointments.get(i).getPrescription() ;
        row[7] = previousAppointments.get(i).getLabTests()==null ? "none" : previousAppointments.get(i).getLabTests();
        row[8] = previousAppointments.get(i).getDoctorByReference() == null ? "none" : previousAppointments.get(i).getDoctorByReference(); 
        row[9] = previousAppointments.get(i).getFollowUp() == null ? "none" : previousAppointments.get(i).getFollowUp();
        row[10] = checkIfNull(previousAppointments.get(i).getBill().getTotal());

        dtm_previousAppointments.addRow(row);
    }
    table_PreviousAppointments.setModel(dtm_previousAppointments);
    table_PreviousAppointments.setRowHeight(30);
    
    
    table_PreviousAppointments.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
    TableColumnModel tcm = table_PreviousAppointments.getColumnModel();
tcm.getColumn(0).setPreferredWidth(250);  
tcm.getColumn(1).setPreferredWidth(200);    
tcm.getColumn(2).setPreferredWidth(250);    
tcm.getColumn(3).setPreferredWidth(200);      
tcm.getColumn(5).setPreferredWidth(250);   
tcm.getColumn(6).setPreferredWidth(200);
tcm.getColumn(7).setPreferredWidth(200);
tcm.getColumn(8).setPreferredWidth(250);
tcm.getColumn(9).setPreferredWidth(200);
tcm.getColumn(10).setPreferredWidth(100);
    
    // skrivanje id kolone
    
    TableColumn colId = table_PreviousAppointments.getColumnModel().getColumn(4);
    colId.setMinWidth(0);
    colId.setPreferredWidth(0);
    colId.setMaxWidth(0);
    
   dtm_MedicalStaff.addTableModelListener((TableModelEvent tme) -> {
            DefaultTableModel tm = (DefaultTableModel) tme.getSource();
        });
 
}
    
      private void setUpFutureAppointmentsTable(){
    dtm_futureAppointments.setColumnIdentifiers(Appointment.appointments_Future());
    futureAppointments = appointmentsBL.getOpenAppointments();
     SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy - HH:mm");
    Object[] rows2 = futureAppointments.toArray();
           
    for(int i = 0; i<futureAppointments.size();i++){
        Object[] row = new Object[Appointment.appointments_Future().length];

        row[0] = (futureAppointments.get(i).getPatient().getName()+" "+futureAppointments.get(i).getPatient().getSurname());
        row[1] = futureAppointments.get(i).getPatient().getStatementOfComplaint();
        row[2] = (futureAppointments.get(i).getDoctorByDoctorId().getName() + " "+ futureAppointments.get(i).getDoctorByDoctorId().getSurname());
        row[3] = sdf.format(futureAppointments.get(i).getAppointmentTime());
        row[4] = futureAppointments.get(i).getIdappointment();


        dtm_futureAppointments.addRow(row);
    }
    table_FutureAppointments.setModel(dtm_futureAppointments);
    table_FutureAppointments.setRowHeight(30);
    // skrivanje id kolone
    
    TableColumn colId = table_FutureAppointments.getColumnModel().getColumn(4);
    colId.setMinWidth(0);
    colId.setPreferredWidth(0);
    colId.setMaxWidth(0);
    
   dtm_MedicalStaff.addTableModelListener((TableModelEvent tme) -> {
            DefaultTableModel tm = (DefaultTableModel) tme.getSource();
        });
 
}
    
private void setUpDoctorTable(){
    dtm_MedicalStaff.setColumnIdentifiers(Doctor.doctorColumns());
    allDoctors = doctorsBL.getAllDoctors();
    Object[] rows2 = allDoctors.toArray();
           
    for(int i = 0; i<allDoctors.size();i++){
        Object[] row = new Object[Doctor.doctorColumns().length];
        row[0] = allDoctors.get(i).getName();
        row[1] = allDoctors.get(i).getSurname();
        row[2] = allSpecializations.get(allDoctors.get(i).getSpecialization()-1).getType();
        row[3] = allDoctors.get(i).getIddoctor();
        dtm_MedicalStaff.addRow(row);
    }
    table_MedicalStaff_List.setModel(dtm_MedicalStaff);
    table_MedicalStaff_List.setRowHeight(30);
    // skrivanje id kolone
    
    TableColumn colId = table_MedicalStaff_List.getColumnModel().getColumn(3);
    colId.setMinWidth(0);
    colId.setPreferredWidth(0);
    colId.setMaxWidth(0);
    
   dtm_MedicalStaff.addTableModelListener((TableModelEvent tme) -> {
            DefaultTableModel tm = (DefaultTableModel) tme.getSource();
        });
 
}

 private void patientShowDetails(Patient patient){
     allPatientContacts = othersBL.getAllPatientContacts();
     allNextOfKinContacts = othersBL.getAllNextOfKinContacts();
     allNextOfKin = patientsBL.getAllNextOfKin();
     
     txt_full_OutpatientID.setText(patient.getOpid());
     txt_full_Name.setText(patient.getName());
     txt_full_MiddleName.setText(patient.getMiddleName());
     txt_full_Surname.setText(patient.getSurname());
     dp_full_DateOfBirth.setDate(patient.getDateOfBirth());
     if(patient.getSexId() == 1){rb_full_Male.setSelected(true);}else{rb_full_Female.setSelected(true);}
     txt_full_PresentAddress_Street.setText(patient.getPresentAddressStreet());
     txt_full_PresentAddress_DoorNo.setText(checkIfNull(patient.getPresentAddressDoorNo()).toString());
     txt_full_PresentAddress_Area.setText(patient.getPresentAddressArea());
     txt_full_PresentAddress_City.setText(patient.getPresentAddressCity());
     txt_full_PresentAddress_State.setText(patient.getPresentAddressState());
     txt_full_PresentAddress_Pincode.setText(patient.getPresentAddressPincode());
     txt_full_PermanentAddress_Street.setText(patient.getPermanentAddressStreet());
     txt_full_PermanentAddress_DoorNo.setText(checkIfNull(patient.getPermanentAddressDoorNo()).toString());
     txt_full_PermanentAddress_Area.setText(patient.getPermanentAddressArea());
     txt_full_PermanentAddress_City.setText(patient.getPermanentAddressCity());
     txt_full_PermanentAddress_State.setText(patient.getPermanentAddressState());
     txt_full_PermanentAddress_Pincode.setText(patient.getPermanentAddressPincode());
     txt_full_MaritalStatus.setText(patient.getMaritalStatus());
     txt_full_NoOfDependents.setText(checkIfNull(patient.getNumberOfDependents()).toString());
     txt_full_Height.setText(checkIfNull(patient.getHeight()).toString());
     txt_full_Weight.setText(checkIfNull(patient.getWeight()).toString());
     ddl_full_BloodType.setSelectedIndex(patient.getBloodType()-1);
     txt_full_Occupation.setText(patient.getOccupation());
     txt_full_Income.setText(checkIfNull(patient.getGrossAnnualIncome()).toString());
     if(patient.getVegetarian()) rb_full_Vegetarian_Yes.setSelected(true); else rb_full_Vegetarian_No.setSelected(true);
     if(patient.getSmoker()) {rb_full_Smoker_Yes.setSelected(true);txt_full_Smoker_PerDay.setEnabled(true); } else{ rb_full_Smoker_No.setSelected(true);txt_full_Smoker_PerDay.setEnabled(false);}
     txt_full_Smoker_PerDay.setText(checkIfNull(patient.getAverageNumberOfCigarettesPerDay()).toString());
     if(patient.getConsumeAlcoholicBeverage()){ rb_full_ConsumeAlcohol_Yes.setSelected(true);txt_full_ConsumeAlcohol_PerDay.setEnabled(true);} else{ rb_full_ConsumeAlcohol_No.setSelected(true);txt_full_ConsumeAlcohol_PerDay.setEnabled(false);}
     txt_full_ConsumeAlcohol_PerDay.setText(checkIfNull(patient.getAverageNumberOfDrinksPerDay()).toString());
     txt_full_Stimulants.setText(patient.getStimulants());
     txt_full_CoffeTea.setText(checkIfNull(patient.getConsumptionOfCoffeeTeaPerDay()).toString());
     txt_full_SoftDrinks.setText(checkIfNull(patient.getConsumptionOfSoftDrinksPerDay()).toString());
     if(patient.getHaveRegularMeals()) rb_full_RegularMeals_Yes.setSelected(true); else rb_full_RegularMeals_No.setSelected(true);
     if(patient.getEatHomeOutsidePredominantly()) rb_full_EatPredominantly_Home.setSelected(true); else rb_full_EatPredominantly_Outside.setSelected(true);
     txt_full_StatementOfComlplaint.setText(patient.getStatementOfComplaint());
     txt_full_HistoryOfTreatments.setText(patient.getHistoryOfPreviousTreatment());
     txt_full_Physician_HospitalTreated.setText(patient.getPhysicianHospitalTreated());
     if(patient.getDiabetic()) rb_full_Diabetic_Yes.setSelected(true); else rb_full_Diabetic_No.setSelected(true);
     if(patient.getHypertensive()) rb_full_Hypertensive_Yes.setSelected(true); else rb_full_Hypertensive_No.setSelected(true);
     txt_full_CardiacCondition.setText(patient.getCardiacCondition());
     txt_full_RespiratoryCondition.setText(patient.getRespiratoryCondition());
     txt_full_DigestiveCondition.setText(patient.getDigestiveCondition());
     txt_full_OrthopedicCondition.setText(patient.getOrthopedicCondition());
     txt_full_MuscularCondition.setText(patient.getMuscularCondition());
     txt_full_NeurologicalCondition.setText(patient.getNeurologicalCondition());
     txt_full_KnownAllergies.setText(patient.getKnownAlergies());
     txt_full_AdverseReactionToDrugs.setText(patient.getKnownAdverseReactionToSpecificDrugs());
     txt_full_MajorSurgeries.setText(patient.getMajorSurgeriesHistory());
     
     pnl_full_Contact.removeAll();
     pnl_full_NextOfKin_Contact.removeAll();
     
     
     List<Contact> patientContacts = allPatientContacts.stream().filter(it -> it.getPatient().getIdpatient() == patient.getIdpatient()).collect(Collectors.toList());  
     patientContacts.forEach((contact) -> { addContactTextfieldWithValues(pnl_full_Contact, contact.getNumber());});     
     NextOfKin nextOfKin = allNextOfKin.stream().filter(it -> it.getPatient().getIdpatient() == patient.getIdpatient()).findFirst().orElse(null);
     txt_full_NextOfKin_Name.setText(nextOfKin.getName());
     txt_full_NextOfKin_MiddleName.setText(nextOfKin.getMiddleName());
     txt_full_NextOfKin_Surname.setText(nextOfKin.getSurname());
     txt_full_NextOfKin_Relationship.setText(nextOfKin.getRelationshipToOutpatient());
     txt_full_NextOFKin_Street.setText(nextOfKin.getAddressStreet());
     txt_full_NextOFKin_DoorNo.setText(checkIfNull(nextOfKin.getAddressDoorNo()).toString());
     txt_full_NextOFKin_Area.setText(nextOfKin.getAddressArea());
     txt_full_NextOFKin_City.setText(nextOfKin.getAddressCity());
     txt_full_NextOFKin_State.setText(nextOfKin.getAddressState());
     txt_full_NextOFKin_Pincode.setText(nextOfKin.getAddressPincode());
     List<ContactNextOfKin> nextOfKinContacts = allNextOfKinContacts.stream().filter(it -> it.getNextOfKin().getIdnextOfKin()== nextOfKin.getIdnextOfKin()).collect(Collectors.toList()); 
     nextOfKinContacts.forEach((nextOfKinContact) -> { addContactTextfieldWithValues(pnl_full_NextOfKin_Contact, nextOfKinContact.getNumber());});     
 }
    
    
     private Doctor CreateDoctor(){
        Doctor doctor = new Doctor();
       doctor.setName(txt_MedicalStaff_Name.getText());
       doctor.setSurname(txt_MedicalStaff_Surname.getText());
       doctor.setSpecialization(ddl_MedicalStaff_Specialization.getSelectedIndex()+1);
        return doctor;
    }
    
    private NextOfKin CreateNextOfKinFromFullForm(){
        NextOfKin nextOfKin = new NextOfKin();
        nextOfKin.setName(txt_full_NextOfKin_Name.getText());
        nextOfKin.setMiddleName(txt_full_NextOfKin_MiddleName.getText());
        nextOfKin.setSurname(txt_full_NextOfKin_Surname.getText());
        nextOfKin.setRelationshipToOutpatient(txt_full_NextOfKin_Relationship.getText());
        nextOfKin.setAddressStreet(txt_full_NextOFKin_Street.getText());
        nextOfKin.setAddressDoorNo(errorIfNotANumber(lbl_full_NextOFKin_DoorNo, txt_full_NextOFKin_DoorNo));
        nextOfKin.setAddressArea(txt_full_NextOFKin_Area.getText());
        nextOfKin.setAddressCity(txt_full_NextOFKin_City.getText());
        nextOfKin.setAddressState(txt_full_NextOFKin_State.getText());
        nextOfKin.setAddressPincode(txt_full_NextOFKin_Pincode.getText());

        return nextOfKin;
    }
  
    
    private Patient CreatePatientFromFullForm() throws ParseException{
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
     Patient patient = new Patient();
        patient.setOpid(txt_full_OutpatientID.getText());
        patient.setName(txt_full_Name.getText());
        patient.setMiddleName(txt_full_MiddleName.getText());
        patient.setSurname(txt_full_Surname.getText());
        patient.setDateOfBirth(sdf.parse(sdf.format(dp_full_DateOfBirth.getDate())));
        patient.setSexId((checkRadioButtons(rb_full_Male) ? 1 : 2));
        patient.setPresentAddressStreet(txt_full_PresentAddress_Street.getText());
        patient.setPresentAddressDoorNo(errorIfNotANumber(lbl_full_PresentAddress_DoorNo,txt_full_PresentAddress_DoorNo));
        patient.setPresentAddressArea(txt_full_PresentAddress_Area.getText());
        patient.setPresentAddressCity(txt_full_PresentAddress_City.getText());
        patient.setPresentAddressState(txt_full_PresentAddress_State.getText());
        patient.setPresentAddressPincode(txt_full_PresentAddress_Pincode.getText());
        patient.setPermanentAddressStreet(txt_full_PermanentAddress_Street.getText());
        patient.setPermanentAddressDoorNo(errorIfNotANumber(lbl_full_PermanentAddress_DoorNo,txt_full_PermanentAddress_DoorNo));
        patient.setPermanentAddressArea(txt_full_PermanentAddress_Area.getText());
        patient.setPermanentAddressCity(txt_full_PermanentAddress_City.getText());
        patient.setPermanentAddressState(txt_full_PermanentAddress_State.getText());
        patient.setPermanentAddressPincode(txt_full_PermanentAddress_Pincode.getText());
        patient.setMaritalStatus(txt_full_MaritalStatus.getText());
        patient.setNumberOfDependents(errorIfNotANumber(lbl_full_NoOfDependents, txt_full_NoOfDependents));
        patient.setHeight(errorIfNotANumber(lbl_full_Height, txt_full_Height));
        patient.setWeight(errorIfNotANumber(lbl_full_Weight, txt_full_Weight));
        patient.setBloodType(ddl_full_BloodType.getSelectedIndex()+1);
        patient.setOccupation(txt_full_Occupation.getText());
        patient.setGrossAnnualIncome(errorIfNotANumber(lbl_full_Income, txt_full_Income));
        patient.setVegetarian(checkRadioButtons(rb_full_Vegetarian_Yes));
        patient.setSmoker(checkRadioButtons(rb_full_Smoker_Yes));
        patient.setAverageNumberOfCigarettesPerDay(errorIfNotANumber(lbl_full_Smoker_PerDay, txt_full_Smoker_PerDay));
        patient.setConsumeAlcoholicBeverage(checkRadioButtons(rb_full_ConsumeAlcohol_Yes));
        patient.setAverageNumberOfDrinksPerDay(errorIfNotANumber(lbl_full_ConsumeAlcohol_PerDay, txt_full_ConsumeAlcohol_PerDay));
        patient.setStimulants(txt_full_Stimulants.getText());
        patient.setConsumptionOfCoffeeTeaPerDay(errorIfNotANumber(lbl_full_CoffeTea, txt_full_CoffeTea));
        patient.setConsumptionOfSoftDrinksPerDay(errorIfNotANumber(lbl_full_SoftDrinks, txt_full_SoftDrinks));
        patient.setHaveRegularMeals(checkRadioButtons(rb_full_RegularMeals_Yes));
        patient.setEatHomeOutsidePredominantly(checkRadioButtons(rb_full_EatPredominantly_Home));
        patient.setStatementOfComplaint(txt_full_StatementOfComlplaint.getText());
        patient.setHistoryOfPreviousTreatment(txt_full_HistoryOfTreatments.getText());
        patient.setPhysicianHospitalTreated(txt_full_Physician_HospitalTreated.getText());
        patient.setDiabetic(checkRadioButtons(rb_full_Diabetic_Yes));
        patient.setHypertensive(checkRadioButtons(rb_full_Hypertensive_Yes));
        patient.setCardiacCondition(txt_full_CardiacCondition.getText());
        patient.setRespiratoryCondition(txt_full_RespiratoryCondition.getText());
        patient.setDigestiveCondition(txt_full_DigestiveCondition.getText());
        patient.setOrthopedicCondition(txt_full_OrthopedicCondition.getText());
        patient.setMuscularCondition(txt_full_MuscularCondition.getText());
        patient.setNeurologicalCondition(txt_full_NeurologicalCondition.getText());
        patient.setKnownAlergies(txt_full_KnownAllergies.getText());
        patient.setKnownAdverseReactionToSpecificDrugs(txt_full_AdverseReactionToDrugs.getText());
        patient.setMajorSurgeriesHistory(txt_full_MajorSurgeries.getText());
        
        
        
         return patient;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator Personal_Profession_Separator;
    private javax.swing.JSeparator Separat_PatientInfo;
    private javax.swing.JSeparator Separator_ContactDetails;
    private javax.swing.JSeparator Separator_NextOfKin;
    private javax.swing.JSeparator Separator_WorkAndLifestyle;
    private javax.swing.JSeparator Separator_WorkAndLifestyle1;
    private javax.swing.JSpinner TimeSpinner_AccessAppointment_Followup;
    private javax.swing.JSpinner TimeSpinner_Appointment;
    private javax.swing.JButton bnt_full_Clear;
    private javax.swing.JButton btn_AccessAppointment_CloseAppointment;
    private javax.swing.JButton btn_Appointments_Access_Closed;
    private javax.swing.JButton btn_Appointments_Access_Open;
    private javax.swing.JButton btn_Appointments_Filter;
    private javax.swing.JButton btn_MedicalStaff_Edit;
    private javax.swing.JButton btn_MedicalStaff_Filter;
    private javax.swing.JButton btn_MedicalStaff_Reset;
    private javax.swing.JButton btn_MedicalStaff_Save;
    private javax.swing.JButton btn_MedicalStaff_Update;
    private javax.swing.JButton btn_NextTab;
    private javax.swing.JButton btn_Patients_Filter;
    private javax.swing.JButton btn_Patients_ShowDetails;
    private javax.swing.JButton btn_PreviousTab;
    private javax.swing.JButton btn_ScheduleAppointment;
    private javax.swing.JButton btn_ScheduleAppointment_Patient_ScheduleAnAppointment;
    private javax.swing.JButton btn_Statistics_chooseWeek;
    private javax.swing.JButton btn_Statistics_chooseYearMonth;
    private javax.swing.JButton btn_full_AddContact;
    private javax.swing.JButton btn_full_AddNextOfKinContact;
    private javax.swing.JButton btn_full_Edit;
    private javax.swing.JButton btn_full_Save;
    private javax.swing.JButton btn_full_Update;
    private javax.swing.ButtonGroup btn_full_group_ConsumeAlcohol;
    private javax.swing.ButtonGroup btn_full_group_Diabetic;
    private javax.swing.ButtonGroup btn_full_group_EatPredominantly;
    private javax.swing.ButtonGroup btn_full_group_HaveRegularMeals;
    private javax.swing.ButtonGroup btn_full_group_Hypertensive;
    private javax.swing.ButtonGroup btn_full_group_Sex;
    private javax.swing.ButtonGroup btn_full_group_Smoker;
    private javax.swing.ButtonGroup btn_full_group_Vegetarian;
    private javax.swing.JButton btn_menu_Appointments;
    private javax.swing.JButton btn_menu_LongForm;
    private javax.swing.JButton btn_menu_MedicalStaff;
    private javax.swing.JButton btn_menu_Patients;
    private javax.swing.JButton btn_menu_QuickForm;
    private javax.swing.JButton btn_menu_Statistics;
    private javax.swing.JButton btn_mini_Save;
    private javax.swing.JButton btn_mini_addContact;
    private javax.swing.ButtonGroup btn_mini_group_sex;
    private javax.swing.JButton btn_mini_reset;
    private javax.swing.JCheckBox cb_AccessAppointment_Followup;
    private javax.swing.JCheckBox cb_AccessAppointment_Reference;
    private javax.swing.JComboBox<String> ddl_AccessAppointment_Doctor;
    private javax.swing.JComboBox<String> ddl_AccessAppointment_Specialization;
    private javax.swing.JComboBox<String> ddl_Bill_PaymentType;
    private javax.swing.JComboBox<String> ddl_MedicalStaff_Specialization;
    private javax.swing.JComboBox<String> ddl_ScheduleAppointment_Patient_Doctors;
    private javax.swing.JComboBox<String> ddl_Statistics_DoctorsPatients;
    private javax.swing.JComboBox<String> ddl_full_BloodType;
    private com.toedter.calendar.JDateChooser dp_AccessAppointment_Followup;
    private com.toedter.calendar.JDateChooser dp_Appointment;
    private com.toedter.calendar.JDateChooser dp_full_DateOfBirth;
    private com.toedter.calendar.JDateChooser dp_mini_DateOfBirth;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbl_AccessAppointment_DR;
    private javax.swing.JLabel lbl_AccessAppointment_DiagnosisTitle;
    private javax.swing.JLabel lbl_AccessAppointment_DoctorName;
    private javax.swing.JLabel lbl_AccessAppointment_LabTestsTitle;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_DateOfBirth;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_DateOfBirthTitle;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_NameTitle;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_Name_Surname;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_Opid;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_OpidTitle;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_StatementOfComplaint;
    private javax.swing.JLabel lbl_AccessAppointment_PatientDetails_StatementOfComplaintTitle;
    private javax.swing.JLabel lbl_AccessAppointment_PrescriptionTitleTitle;
    private javax.swing.JLabel lbl_AccessAppointment_Title;
    private javax.swing.JLabel lbl_Appointments_Filter;
    private javax.swing.JLabel lbl_Appointments_TitleAppointments;
    private javax.swing.JCheckBox lbl_Bill_AppointmentCost;
    private javax.swing.JLabel lbl_Bill_For;
    private javax.swing.JCheckBox lbl_Bill_LabTest_Cost;
    private javax.swing.JLabel lbl_Bill_Number;
    private javax.swing.JLabel lbl_Bill_NumberTitle;
    private javax.swing.JLabel lbl_Bill_Patient;
    private javax.swing.JLabel lbl_Bill_PaymentType;
    private javax.swing.JCheckBox lbl_Bill_Perscription_Cost;
    private javax.swing.JLabel lbl_Bill_Title;
    private javax.swing.JLabel lbl_Bill_Total;
    private javax.swing.JLabel lbl_Bill_TotalTitle;
    private javax.swing.JLabel lbl_Doctors_Title;
    private javax.swing.JLabel lbl_MedicalStaff_Filter;
    private javax.swing.JLabel lbl_MedicalStaff_Name;
    private javax.swing.JLabel lbl_MedicalStaff_Specialization;
    private javax.swing.JLabel lbl_MedicalStaff_Surname;
    private javax.swing.JLabel lbl_Patients_Filter;
    private javax.swing.JLabel lbl_Patients_Title;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_Complaint_Title;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_DateTitle;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_DoctorTitle;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_NameTitle;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_Name_Surname;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_Opid;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_OpidTitle;
    private javax.swing.JLabel lbl_ScheduleAppointment_Patient_TimeTitle;
    private javax.swing.JLabel lbl_Schedule_Appointment_Patient_DateOfBirth;
    private javax.swing.JLabel lbl_Schedule_Appointment_Patient_DateOfBirth_Title;
    private javax.swing.JLabel lbl_StatisticsDaily_allprescriptionsTitle;
    private javax.swing.JLabel lbl_StatisticsDaily_followUpPatients;
    private javax.swing.JLabel lbl_StatisticsDaily_followUpPatientsTitle;
    private javax.swing.JLabel lbl_StatisticsDaily_medicinesprescribed;
    private javax.swing.JLabel lbl_StatisticsDaily_newPatients;
    private javax.swing.JLabel lbl_StatisticsDaily_newPatientsTitle;
    private javax.swing.JLabel lbl_StatisticsDaily_patientsSeen;
    private javax.swing.JLabel lbl_StatisticsDaily_patientsSeenTitle;
    private javax.swing.JLabel lbl_StatisticsDaily_testsOrdered;
    private javax.swing.JLabel lbl_StatisticsDaily_totalFeesCharged;
    private javax.swing.JLabel lbl_StatisticsDaily_totalFeesChargedTitle;
    private javax.swing.JLabel lbl_Statistics_ChooseWeek;
    private javax.swing.JLabel lbl_Statistics_DailyReportsTitle;
    private javax.swing.JLabel lbl_Statistics_ForMonth;
    private javax.swing.JLabel lbl_Statistics_ForWeek;
    private javax.swing.JLabel lbl_Statistics_Weekly_monthlyreports;
    private javax.swing.JLabel lbl_Statistics_averagepatientspermontha;
    private javax.swing.JLabel lbl_Statistics_averagepatientsperweek;
    private javax.swing.JLabel lbl_Welcome_OutpatientModel;
    private javax.swing.JLabel lbl_Welcome_Welcometo;
    private javax.swing.JLabel lbl_full_AdverseReactionToDrugs;
    private javax.swing.JLabel lbl_full_BloodType;
    private javax.swing.JLabel lbl_full_CardiacCondition;
    private javax.swing.JLabel lbl_full_CoffeTea;
    private javax.swing.JLabel lbl_full_ConsumeAlcohol;
    private javax.swing.JLabel lbl_full_ConsumeAlcohol_PerDay;
    private javax.swing.JLabel lbl_full_Contact;
    private javax.swing.JLabel lbl_full_ContactDetails_Address_title;
    private javax.swing.JLabel lbl_full_ContactDetails_Permanent_Address;
    private javax.swing.JLabel lbl_full_ContactDetails_Permanent_title;
    private javax.swing.JLabel lbl_full_ContactDetails_Present_title;
    private javax.swing.JLabel lbl_full_DateOfBirth;
    private javax.swing.JLabel lbl_full_Diabetic;
    private javax.swing.JLabel lbl_full_DigestiveCondition;
    private javax.swing.JLabel lbl_full_EatPredominantly;
    private javax.swing.JLabel lbl_full_Height;
    private javax.swing.JLabel lbl_full_HistoryOfTreatments;
    private javax.swing.JLabel lbl_full_Hypertensive;
    private javax.swing.JLabel lbl_full_Income;
    private javax.swing.JLabel lbl_full_KnownAllergies;
    private javax.swing.JLabel lbl_full_MajorSurgeries;
    private javax.swing.JLabel lbl_full_MaritalStatus;
    private javax.swing.JLabel lbl_full_MiddleName;
    private javax.swing.JLabel lbl_full_MuscularCondition;
    private javax.swing.JLabel lbl_full_Name;
    private javax.swing.JLabel lbl_full_NeurologicalCondition;
    private javax.swing.JLabel lbl_full_NextOFKin_Area;
    private javax.swing.JLabel lbl_full_NextOFKin_City;
    private javax.swing.JLabel lbl_full_NextOFKin_DoorNo;
    private javax.swing.JLabel lbl_full_NextOFKin_Pincode;
    private javax.swing.JLabel lbl_full_NextOFKin_State;
    private javax.swing.JLabel lbl_full_NextOFKin_Street;
    private javax.swing.JLabel lbl_full_NextOfKin_Contact;
    private javax.swing.JLabel lbl_full_NextOfKin_MiddleName;
    private javax.swing.JLabel lbl_full_NextOfKin_Name;
    private javax.swing.JLabel lbl_full_NextOfKin_Relationship;
    private javax.swing.JLabel lbl_full_NextOfKin_Surname;
    private javax.swing.JLabel lbl_full_NoOfDependents;
    private javax.swing.JLabel lbl_full_Occupation;
    private javax.swing.JLabel lbl_full_OrthopedicCondition;
    private javax.swing.JLabel lbl_full_OutpatientID;
    private javax.swing.JLabel lbl_full_PermanentAddress_Area;
    private javax.swing.JLabel lbl_full_PermanentAddress_City;
    private javax.swing.JLabel lbl_full_PermanentAddress_DoorNo;
    private javax.swing.JLabel lbl_full_PermanentAddress_Pincode;
    private javax.swing.JLabel lbl_full_PermanentAddress_State;
    private javax.swing.JLabel lbl_full_PermanentAddress_Street;
    private javax.swing.JLabel lbl_full_Physician_HospitalTreated;
    private javax.swing.JLabel lbl_full_PresentAddress_Area;
    private javax.swing.JLabel lbl_full_PresentAddress_City;
    private javax.swing.JLabel lbl_full_PresentAddress_DoorNo;
    private javax.swing.JLabel lbl_full_PresentAddress_Pincode;
    private javax.swing.JLabel lbl_full_PresentAddress_State;
    private javax.swing.JLabel lbl_full_PresentAddress_Street;
    private javax.swing.JLabel lbl_full_RegularMeals;
    private javax.swing.JLabel lbl_full_RespiratoryCondition;
    private javax.swing.JLabel lbl_full_Sex;
    private javax.swing.JLabel lbl_full_Smoker;
    private javax.swing.JLabel lbl_full_Smoker_PerDay;
    private javax.swing.JLabel lbl_full_SoftDrinks;
    private javax.swing.JLabel lbl_full_StatementOfComlplaint;
    private javax.swing.JLabel lbl_full_Stimulants;
    private javax.swing.JLabel lbl_full_Surname;
    private javax.swing.JLabel lbl_full_Title_BasicComplaints;
    private javax.swing.JLabel lbl_full_Title_BasicDetails;
    private javax.swing.JLabel lbl_full_Title_ContactDetails;
    private javax.swing.JLabel lbl_full_Title_ImportantMedicalComplaints;
    private javax.swing.JLabel lbl_full_Title_LifestyleDetails;
    private javax.swing.JLabel lbl_full_Title_NextOfKin_BasicDetails;
    private javax.swing.JLabel lbl_full_Title_NextOfKin_ContactDetails;
    private javax.swing.JLabel lbl_full_Title_PersonalDetails;
    private javax.swing.JLabel lbl_full_Title_ProfessionDetails;
    private javax.swing.JLabel lbl_full_Vegetarian;
    private javax.swing.JLabel lbl_full_Weight;
    private javax.swing.JLabel lbl_mini_Complaint;
    private javax.swing.JLabel lbl_mini_Contact;
    private javax.swing.JLabel lbl_mini_DateOfBirth;
    private javax.swing.JRadioButton lbl_mini_Female;
    private javax.swing.JLabel lbl_mini_MiddleName;
    private javax.swing.JLabel lbl_mini_Name;
    private javax.swing.JLabel lbl_mini_NextOfKinFormTitle;
    private javax.swing.JLabel lbl_mini_NextOfKinMiddleName;
    private javax.swing.JLabel lbl_mini_NextOfKinName;
    private javax.swing.JLabel lbl_mini_NextOfKinSurname;
    private javax.swing.JLabel lbl_mini_PatientFormTitle;
    private javax.swing.JLabel lbl_mini_RelationshipToOutpatient;
    private javax.swing.JLabel lbl_mini_Sex;
    private javax.swing.JLabel lbl_mini_Surname;
    private javax.swing.JLabel lbl_mini_TitleQuick;
    private javax.swing.JLabel lbl_statistics_chooseMonth;
    private javax.swing.JLabel medicalStaff_AddDoctor_Naslov;
    private com.toedter.calendar.JMonthChooser monthChooser_Statistics;
    private javax.swing.JLabel pbl_Welcome_Signature;
    private javax.swing.JPanel pnl_AccessAppointment_Appointment;
    private javax.swing.JPanel pnl_AccessAppointment_Bill;
    private javax.swing.JPanel pnl_AccessAppointment_Followup;
    private javax.swing.JPanel pnl_AccessAppointment_PatientDetails;
    private javax.swing.JPanel pnl_AccessAppointment_Referal;
    private javax.swing.JPanel pnl_AccessAppointment_South;
    private javax.swing.JPanel pnl_Access_Appointment;
    private javax.swing.JPanel pnl_AppointmentHistory;
    private javax.swing.JPanel pnl_Appointment_Access_Card;
    private javax.swing.JPanel pnl_Appointments;
    private javax.swing.JPanel pnl_AppointmentsFuture;
    private javax.swing.JPanel pnl_Appointments_North;
    private javax.swing.JPanel pnl_Appointments_South;
    private javax.swing.JPanel pnl_Appointments_West;
    private javax.swing.JPanel pnl_BillGrid;
    private javax.swing.JPanel pnl_Bill_Center;
    private javax.swing.JPanel pnl_Bill_East;
    private javax.swing.JPanel pnl_Bill_North;
    private javax.swing.JPanel pnl_Bill_South;
    private javax.swing.JPanel pnl_Bill_West;
    private javax.swing.JPanel pnl_DailyStatistics;
    private javax.swing.JPanel pnl_MedicalStaff;
    private javax.swing.JPanel pnl_MedicalStaff_NorthBorder;
    private javax.swing.JPanel pnl_MedicalStaff_South;
    private javax.swing.JPanel pnl_MedicalStaff_UpdateSave;
    private javax.swing.JPanel pnl_MedicalStaff_West;
    private javax.swing.JPanel pnl_Menu;
    private javax.swing.JPanel pnl_MiniForm;
    private javax.swing.JPanel pnl_Patients;
    private javax.swing.JPanel pnl_Patients_North;
    private javax.swing.JPanel pnl_Patients_South;
    private javax.swing.JPanel pnl_Patients_West;
    private javax.swing.JPanel pnl_ScheduleAppointment;
    private javax.swing.JPanel pnl_ScheduleAppointment_PatientDetails;
    private javax.swing.JPanel pnl_ScheduleAppointment_TimeDate;
    private javax.swing.JPanel pnl_Statistics;
    private javax.swing.JPanel pnl_Statistics_FollowUpPatients;
    private javax.swing.JPanel pnl_Statistics_FollowUpPatientsPerWeek;
    private javax.swing.JPanel pnl_Statistics_chart_newPatients;
    private javax.swing.JPanel pnl_Statistics_chart_newPatientsPerWeek;
    private javax.swing.JPanel pnl_WeeklyStatistics;
    private javax.swing.JPanel pnl_WelcomeSite;
    private javax.swing.JPanel pnl_backgroundCardLayout;
    private javax.swing.JPanel pnl_card_SaveUpdate;
    private javax.swing.JPanel pnl_full_BasicComplaints_labels;
    private javax.swing.JPanel pnl_full_BasicComplaints_textBoxes;
    private javax.swing.JPanel pnl_full_BasicDetails_labels;
    private javax.swing.JPanel pnl_full_BasicDetails_textBoxes;
    private javax.swing.JPanel pnl_full_Contact;
    private javax.swing.JPanel pnl_full_ContactDetails_PermanentAddress_textbox;
    private javax.swing.JPanel pnl_full_ContactDetails_PermanentAdress_labels;
    private javax.swing.JPanel pnl_full_ContactDetails_PresentAddress_textbox;
    private javax.swing.JPanel pnl_full_ContactDetails_PresentAdress_labels;
    private javax.swing.JPanel pnl_full_EditReset;
    private javax.swing.JPanel pnl_full_ImportantMedicalComplaints_labels;
    private javax.swing.JPanel pnl_full_ImportantMedicalComplaints_textBoxes;
    private javax.swing.JPanel pnl_full_LifestyleDetails_labels;
    private javax.swing.JPanel pnl_full_LifestyleDetails_textboxes;
    private javax.swing.JPanel pnl_full_NextOfKin_BasicDetails_Labels;
    private javax.swing.JPanel pnl_full_NextOfKin_BasicDetails_textBoxes;
    private javax.swing.JPanel pnl_full_NextOfKin_Contact;
    private javax.swing.JPanel pnl_full_NextOfKin_ContactDetails_Labels;
    private javax.swing.JPanel pnl_full_NextOfKin_ContactDetails_textBoxes;
    private javax.swing.JPanel pnl_full_PersonalDetails_labels;
    private javax.swing.JPanel pnl_full_PersonalDetails_textBoxes;
    private javax.swing.JPanel pnl_full_ProffessionDetails_labels;
    private javax.swing.JPanel pnl_full_ProffessionDetails_textBoxes;
    private javax.swing.JLabel pnl_full_Title;
    private javax.swing.JPanel pnl_mini_Contact;
    private javax.swing.JPanel pnl_tabForm;
    private javax.swing.JRadioButton rb_full_ConsumeAlcohol_No;
    private javax.swing.JRadioButton rb_full_ConsumeAlcohol_Yes;
    private javax.swing.JRadioButton rb_full_Diabetic_No;
    private javax.swing.JRadioButton rb_full_Diabetic_Yes;
    private javax.swing.JRadioButton rb_full_EatPredominantly_Home;
    private javax.swing.JRadioButton rb_full_EatPredominantly_Outside;
    private javax.swing.JRadioButton rb_full_Female;
    private javax.swing.JRadioButton rb_full_Hypertensive_No;
    private javax.swing.JRadioButton rb_full_Hypertensive_Yes;
    private javax.swing.JRadioButton rb_full_Male;
    private javax.swing.JRadioButton rb_full_RegularMeals_No;
    private javax.swing.JRadioButton rb_full_RegularMeals_Yes;
    private javax.swing.JRadioButton rb_full_Smoker_No;
    private javax.swing.JRadioButton rb_full_Smoker_Yes;
    private javax.swing.JRadioButton rb_full_Vegetarian_No;
    private javax.swing.JRadioButton rb_full_Vegetarian_Yes;
    private javax.swing.JRadioButton rb_mini_Male;
    private javax.swing.JScrollPane scroll_table_patients;
    private javax.swing.JTabbedPane tab_AccessAppointment;
    private javax.swing.JTabbedPane tab_Appointments;
    private javax.swing.JTabbedPane tab_PatientDetails;
    private javax.swing.JPanel tab_full_MedicalComplaints;
    private javax.swing.JPanel tab_full_NextOfKinDetails;
    private javax.swing.JPanel tab_full_PatientDetails;
    private javax.swing.JPanel tab_full_WorkAndLifestyle;
    private javax.swing.JTable table_FutureAppointments;
    private javax.swing.JTable table_MedicalStaff_List;
    private javax.swing.JTable table_Patients_List;
    private javax.swing.JTable table_PreviousAppointments;
    private javax.swing.JTextArea txt_AccessAppointment_Diagnosis;
    private javax.swing.JTextArea txt_AccessAppointment_LabTests;
    private javax.swing.JTextArea txt_AccessAppointment_Prescription;
    private javax.swing.JTextField txt_Appointments_Filter;
    private javax.swing.JTextField txt_Bill_AppointmentCost;
    private javax.swing.JTextField txt_Bill_LaboratoryTest_Cost;
    private javax.swing.JTextField txt_Bill_Perscription_Cost;
    private javax.swing.JTextField txt_MedicalStaff_Filter;
    private javax.swing.JTextField txt_MedicalStaff_Name;
    private javax.swing.JTextField txt_MedicalStaff_Surname;
    private javax.swing.JTextField txt_Patients_Filter;
    private javax.swing.JLabel txt_ScheduleAnAppointment_Title;
    private javax.swing.JTextArea txt_ScheduleAppointment_Patient_Complaint;
    private javax.swing.JLabel txt_StatisticsDaily_allLabTests;
    private javax.swing.JTextField txt_full_AdverseReactionToDrugs;
    private javax.swing.JTextField txt_full_CardiacCondition;
    private javax.swing.JTextField txt_full_CoffeTea;
    private javax.swing.JTextField txt_full_ConsumeAlcohol_PerDay;
    private javax.swing.JTextField txt_full_Contact;
    private javax.swing.JTextField txt_full_DigestiveCondition;
    private javax.swing.JTextField txt_full_Height;
    private javax.swing.JTextField txt_full_HistoryOfTreatments;
    private javax.swing.JTextField txt_full_Income;
    private javax.swing.JTextField txt_full_KnownAllergies;
    private javax.swing.JTextField txt_full_MajorSurgeries;
    private javax.swing.JTextField txt_full_MaritalStatus;
    private javax.swing.JTextField txt_full_MiddleName;
    private javax.swing.JTextField txt_full_MuscularCondition;
    private javax.swing.JTextField txt_full_Name;
    private javax.swing.JTextField txt_full_NeurologicalCondition;
    private javax.swing.JTextField txt_full_NextOFKin_Area;
    private javax.swing.JTextField txt_full_NextOFKin_City;
    private javax.swing.JTextField txt_full_NextOFKin_DoorNo;
    private javax.swing.JTextField txt_full_NextOFKin_Pincode;
    private javax.swing.JTextField txt_full_NextOFKin_State;
    private javax.swing.JTextField txt_full_NextOFKin_Street;
    private javax.swing.JTextField txt_full_NextOfKin_Contact;
    private javax.swing.JTextField txt_full_NextOfKin_MiddleName;
    private javax.swing.JTextField txt_full_NextOfKin_Name;
    private javax.swing.JTextField txt_full_NextOfKin_Relationship;
    private javax.swing.JTextField txt_full_NextOfKin_Surname;
    private javax.swing.JTextField txt_full_NoOfDependents;
    private javax.swing.JTextField txt_full_Occupation;
    private javax.swing.JTextField txt_full_OrthopedicCondition;
    private javax.swing.JTextField txt_full_OutpatientID;
    private javax.swing.JTextField txt_full_PermanentAddress_Area;
    private javax.swing.JTextField txt_full_PermanentAddress_City;
    private javax.swing.JTextField txt_full_PermanentAddress_DoorNo;
    private javax.swing.JTextField txt_full_PermanentAddress_Pincode;
    private javax.swing.JTextField txt_full_PermanentAddress_State;
    private javax.swing.JTextField txt_full_PermanentAddress_Street;
    private javax.swing.JTextField txt_full_Physician_HospitalTreated;
    private javax.swing.JTextField txt_full_PresentAddress_Area;
    private javax.swing.JTextField txt_full_PresentAddress_City;
    private javax.swing.JTextField txt_full_PresentAddress_DoorNo;
    private javax.swing.JTextField txt_full_PresentAddress_Pincode;
    private javax.swing.JTextField txt_full_PresentAddress_State;
    private javax.swing.JTextField txt_full_PresentAddress_Street;
    private javax.swing.JTextField txt_full_RespiratoryCondition;
    private javax.swing.JTextField txt_full_Smoker_PerDay;
    private javax.swing.JTextField txt_full_SoftDrinks;
    private javax.swing.JTextArea txt_full_StatementOfComlplaint;
    private javax.swing.JTextField txt_full_Stimulants;
    private javax.swing.JTextField txt_full_Surname;
    private javax.swing.JTextField txt_full_Weight;
    private javax.swing.JTextArea txt_mini_Complaint;
    private javax.swing.JTextField txt_mini_Contact;
    private javax.swing.JTextField txt_mini_MiddleName;
    private javax.swing.JTextField txt_mini_Name;
    private javax.swing.JTextField txt_mini_NextOfKinMiddleName;
    private javax.swing.JTextField txt_mini_NextOfKinName;
    private javax.swing.JTextField txt_mini_NextOfKinSurname;
    private javax.swing.JTextField txt_mini_RelatiounshipToOutpatient;
    private javax.swing.JTextField txt_mini_Surname;
    private com.toedter.components.JSpinField weekSpinner_Statistics;
    private com.toedter.calendar.JYearChooser yearChooser_Statistics;
    // End of variables declaration//GEN-END:variables

}