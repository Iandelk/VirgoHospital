package DAL.Models;
// Generated Jun 3, 2019 3:10:05 AM by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Doctor generated by hbm2java
 */
@Entity
@Table(name="Doctor"
    ,schema="dbo"
    ,catalog="Virgo_Database"
)
public class Doctor  implements java.io.Serializable {


     private int iddoctor;
     private int specializationId;
     private String name;
     private String surname;
     private Set<Appointment> appointmentsForDoctorId = new HashSet<Appointment>(0);
     private Set<Appointment> appointmentsForReference = new HashSet<Appointment>(0);

    public Doctor() {
    }

  public Doctor(String name, String surname, int specializationId) {
        this.name = name;
        this.surname = surname;
        this.specializationId = specializationId;
    }	
    
    public Doctor(int iddoctor, String name, String surname) {
        this.iddoctor = iddoctor;
        this.name = name;
        this.surname = surname;
    }
    public Doctor(int iddoctor, int specializationId, String name, String surname, Set<Appointment> appointmentsForDoctorId, Set<Appointment> appointmentsForReference) {
       this.iddoctor = iddoctor;
       this.specializationId = specializationId;
       this.name = name;
       this.surname = surname;
       this.appointmentsForDoctorId = appointmentsForDoctorId;
       this.appointmentsForReference = appointmentsForReference;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="IDDoctor", unique=true, nullable=false)
    public int getIddoctor() {
        return this.iddoctor;
    }
    
    public void setIddoctor(int iddoctor) {
        this.iddoctor = iddoctor;
    }

    @Column(name="SpecializationID")
    public Integer getSpecialization() {
        return this.specializationId;
    }
    
    public void setSpecialization(int specializationId) {
        this.specializationId = specializationId;
    }

    
    @Column(name="Name", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="Surname", nullable=false)
    public String getSurname() {
        return this.surname;
    }
    
    public void setSurname(String surname) {
        this.surname = surname;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="doctorByDoctorId")
    public Set<Appointment> getAppointmentsForDoctorId() {
        return this.appointmentsForDoctorId;
    }
    
    public void setAppointmentsForDoctorId(Set<Appointment> appointmentsForDoctorId) {
        this.appointmentsForDoctorId = appointmentsForDoctorId;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="doctorByReference")
    public Set<Appointment> getAppointmentsForReference() {
        return this.appointmentsForReference;
    }
    
    public void setAppointmentsForReference(Set<Appointment> appointmentsForReference) {
        this.appointmentsForReference = appointmentsForReference;
    }

    public static String[] doctorColumns(){
        String[] columns = {
        "Name", "Surname", "Specialization", ""
        };
        return columns;
    }

    @Override
    public String toString() {
        return getName() +" "+getSurname();
    }

    @Override
public boolean equals(Object o) {
    return (o instanceof Doctor && ((Doctor)o).equals(getName()+" "+getSurname())) ||
                (o instanceof String && o.equals(getName()+" "+getSurname()));
}

@Override
public int hashCode() {
    return (getName()+" "+getSurname()).hashCode();
}

}


