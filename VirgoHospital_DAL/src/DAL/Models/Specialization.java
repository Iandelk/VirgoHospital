package DAL.Models;
// Generated Jun 3, 2019 11:46:52 AM by Hibernate Tools 4.3.1


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Specialization generated by hbm2java
 */
@Entity
@Table(name="Specialization"
    ,schema="dbo"
    ,catalog="Virgo_Database"
)
public class Specialization  implements java.io.Serializable {


     private int idspecialization;
     private String type;
     private Set<Doctor> doctors = new HashSet<Doctor>(0);

    public Specialization() {
    }

	
    public Specialization(String type) {
        this.type = type;
    }
    public Specialization(int idspecialization, String type, Set<Doctor> doctors) {
       this.idspecialization = idspecialization;
       this.type = type;
       this.doctors = doctors;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="IDSpecialization", unique=true, nullable=false)
    public int getIdspecialization() {
        return this.idspecialization;
    }
    
    public void setIdspecialization(int idspecialization) {
        this.idspecialization = idspecialization;
    }

    
    @Column(name="Type", nullable=false)
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = type;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="specialization")
    public Set<Doctor> getDoctors() {
        return this.doctors;
    }
    
    public void setDoctors(Set<Doctor> doctors) {
        this.doctors = doctors;
    }

    @Override
    public String toString() {
        return type; //To change body of generated methods, choose Tools | Templates.
    }


 @Override
public boolean equals(Object o) {
    return (o instanceof Specialization && ((Specialization)o).equals(getType())) ||
                (o instanceof String && o.equals(getType()));
}

@Override
public int hashCode() {
    return (getType()).hashCode();
}


}


